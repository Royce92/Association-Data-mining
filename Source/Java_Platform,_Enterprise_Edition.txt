 java platform  enterprise edition or java ee is oracle s enterprise java computing platform  the platform provides an api and runtime environment for developing and running enterprise software  including network and web services  and other large scale  multi tiered  scalable  reliable  and secure network applications  java ee extends the java platform  standard edition  java se    providing an api for object relational mapping  distributed and multi tier architectures  and web services  the platform incorporates a design based largely on modular components running on an application server  software for java ee is primarily developed in the java programming language  the platform emphasizes convention over configuration  and annotations for configuration  optionally xml can be used to override annotations or to deviate from the platform defaults             the platform was known as java   platform  enterprise edition or j ee until the name was changed to java platform  enterprise edition or java ee in version    the current version is called java ee       java ee is defined by its specification  as with other java community process specifications  providers must meet certain conformance requirements in order to declare their products as java ee compliant     java ee includes several api specifications  such as rmi  e mail  jms  web services  xml  etc   and defines how to coordinate them  java ee also features some specifications unique to java ee for components  these include enterprise javabeans  connectors  servlets  javaserver pages and several web service technologies  this allows developers to create enterprise applications that are portable and scalable  and that integrate with legacy technologies  a java ee application server can handle transactions  security  scalability  concurrency and management of the components it is deploying  in order to enable developers to concentrate more on the business logic of the components rather than on infrastructure and integration tasks     the java ee apis includes several technologies that extend the functionality of the base java se apis     the servlet specification defines a set of apis to service mainly http requests  it includes the javaserver pages  jsp  specification     the java api for websocket specification defines a set of apis to service websocket connections     this package defines the root of the javaserver faces  jsf  api  jsf is a technology for constructing user interfaces out of components     this package defines the component part of the javaserver faces api  since jsf is primarily component oriented  this is one of the core packages  the package overview contains a uml diagram of the component hierarchy     this package defines the classes and interfaces for java ee s expression language  the expression language  el  is a simple language originally designed to satisfy the specific needs of web application developers  it is used specifically in jsf to bind components to  backing  beans and in cdi to name beans  but can be used throughout the entire platform     these packages define the injection annotations for the contexts and dependency injection  cdi  apis     these packages define the context annotations and interfaces for the contexts and dependency injection  cdi  api     the enterprise javabean  ejb  specification defines a set of lightweight apis that an object container  the ejb container  will support in order to provide transactions  using jta   remote procedure calls  using rmi or rmi iiop   concurrency control  dependency injection and access control for business objects  this package contains the enterprise javabeans classes and interfaces that define the contracts between the enterprise bean and its clients and between the enterprise bean and the ejb container     this package contains the annotations and interfaces for the declarative validation support offered by the bean validation api  bean validation provides a unified way to provide constraints on beans  e g  jpa model classes  that can be enforced cross layer  in java ee  jpa honors bean validation constraints in the persistence layer  while jsf does so in the view layer     this package contains the contracts between a persistence provider and the managed classes and the clients of the java persistence api  jpa      this package provides the java transaction api  jta  that contains the interfaces and annotations to interact with the transaction support offered by java ee  even though this api abstracts from the really low level details  the interfaces are also considered somewhat low level and the average application developer in java ee is either assumed to be relying on transparent handling of transactions by the higher level ejb abstractions  or using the annotations provided by this api in combination with cdi managed beans     this package provides the core of the java authentication spi  jaspic  that contains the interfaces and classes to build authentication modules for secure java ee applications  authentication modules are responsible for the interaction dialog with a user  e g  redirecting to a form or to an openid provider   verifying the user s input  e g  by doing an ldap lookup  database query or contacting the openid provider with a token  and retrieving a set of groups roles that the authenticated user is in or has  e g  by again doing an ldap lookup or database query      this package provides the interfaces for interacting directly with java ee s platform default managed thread pool  a higher level executor service working on this same thread pool can be used optionally  the same interfaces can be used for user defined managed thread pools  but this relies on vendor specific configuration and is not covered by the java ee specification     this package defines the java message service  jms  api  the jms api provides a common way for java programs to create  send  receive and read an enterprise messaging system s messages     this package defines the entry ap for java ee batch applications  the batch applications api provides the means to run long running background tasks that possibly involve a large volume of data and which may need to be periodically executed     this package defines the java ee connector architecture  jca  api  java ee connector architecture  jca  is a java based technology solution for connecting application servers and enterprise information systems  eis  as part of enterprise application integration  eai  solutions  this is a low level api aimed at vendors that the average application developer typically does not come in contact with     in an attempt to limit the footprint of web containers  both in physical and in conceptual terms  the web profile was created  a subset of the java ee specifications  the java ee web profile comprises the following     although by definition all java ee implementations provide the same base level of technologies  namely  the java ee spec and the associated apis   they can differ considerably with respect to extra features  like connectors  clustering  fault tolerance  high availability  security  etc    installed size  memory footprint  startup time  etc     the code sample shown below demonstrates how various technologies in java ee   are used together to build a web form for editing a user     in java ee a  web  ui can be built using servlet  javaserver pages  jsp   or javaserver faces  jsf  with facelets  the example below uses jsf and facelets  not explicitly shown is that the input components use the java ee bean validation api under the covers to validate constraints     to assist the view  java ee uses a concept called a  backing bean   the example below uses contexts and dependency injection  cdi  and enterprise javabean  ejb      to implement business logic  enterprise javabean  ejb  is the dedicated technology in java ee  for the actual persistence  jdbc or java persistence api  jpa  can be used  the example below uses ejb and jpa  not explicitly shown is that jta is used under the covers by ejb to control transactional behavior     for defining entity model classes java ee provides the java persistence api  jpa   and for expressing constraints on those entities it provides the bean validation api  the example below uses both these technologies  