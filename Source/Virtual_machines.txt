 in computing  a virtual machine  vm  is an emulation of a particular computer system  virtual machines operate based on the computer architecture and functions of a real or hypothetical computer  and their implementations may involve specialized hardware  software  or a combination of both     classification of virtual machines can be based on the degree to which they implement functionality of targeted real machines  that way  system virtual machines  also known as full virtualization vms  provide a complete substitute for the targeted real machine and a level of functionality required for the execution of a complete operating system  on the other hand  process virtual machines are designed to execute a single computer program by providing an abstracted and platform independent program execution environment     different virtualization techniques are used  based on the desired usage  native execution is based on direct virtualization of the underlying raw hardware  thus it provides multiple  instances  of the same architecture a real machine is based on  capable of running complete operating systems  some virtual machines can also emulate different architectures and allow execution of software applications and operating systems written for another cpu or architecture  operating system level virtualization allows the resources of a computer to be partitioned via kernel s support for multiple isolated user space instances  which are usually called containers and may look and feel like real machines to the end users     some computer architectures are capable of hardware assisted virtualization  which enables efficient full virtualization by using virtualization specific hardware capabilities  primarily from the host cpus             a virtual machine  vm  is a software implementation of a machine  for example  a computer  that executes programs like a physical machine  virtual machines are separated into two major classes  based on their use and degree of correspondence to any real machine     a vm was originally defined by popek and goldberg as  an efficient  isolated duplicate of a real machine   current use includes virtual machines which have no direct correspondence to any real hardware      system virtual machine advantages     the main disadvantages of vms are     multiple vms running their own guest operating system are frequently engaged for server consolidation in order to avoid interference from separate vms on the same actual machine platform     the desire to run multiple operating systems was the initial motivation for virtual machines  so as to allow time sharing among several single tasking operating systems  in some respects  a system virtual machine can be considered a generalization of the concept of virtual memory that historically preceded it  ibm s cp cms  the first systems to allow full virtualization  implemented time sharing by providing each user with a single user operating system  the cms  unlike virtual memory  a system virtual machine entitled the user to write privileged instructions in their code  this approach had certain advantages  such as adding input output devices not allowed by the standard system      as technology evolves virtual memory for purposes of virtualization  new systems of memory overcommitment may be applied to manage memory sharing among multiple virtual machines on one actual computer operating system  it may be possible to share  memory pages  that have identical contents among multiple vms that run on the same actual machine  this may result in mapping them to the same physical page  by a technique known as kernel samepage merging  this is particularly useful for read only pages  such as those that contain code segments  in particular would be the case of multiple virtual machines running the same or similar software  software libraries  web servers  middleware components  etc  the guest operating systems do not need to be compliant with the host hardware  thereby making it possible to run different operating systems on the same computer  e g   microsoft windows  linux  or previous versions of an operating system to support future software     the use of virtual machines to support separate guest operating systems is popular in regard to embedded systems  a typical use would be to run a real time operating system simultaneously with a preferred complex operating system  such as linux or windows  another use would be for novel and unproven software still in the developmental stage  so it runs inside a sandbox  virtual machines have other advantages for operating system development  and may include improved debugging access and faster reboots      a process vm  sometimes called an application virtual machine  or managed runtime environment  mre   runs as a normal application inside a host os and supports a single process  it is created when that process is started and destroyed when it exits  its purpose is to provide a platform independent programming environment that abstracts away details of the underlying hardware or operating system  and allows a program to execute in the same way on any platform     a process vm provides a high level abstractionxa    that of a high level programming language  compared to the low level isa abstraction of the system vm   process vms are implemented using an interpreter  performance comparable to compiled programming languages is achieved by the use of just in time compilation     this type of vm has become popular with the java programming language  which is implemented using the java virtual machine  other examples include the parrot virtual machine  and the  net framework  which runs on a vm called the common language runtime  all of them can serve as an abstraction layer for any computer language     a special case of process vms are systems that abstract over the communication mechanisms of a  potentially heterogeneous  computer cluster  such a vm does not consist of a single process  but one process per physical machine in the cluster  they are designed to ease the task of programming concurrent applications by letting the programmer focus on algorithms rather than the communication mechanisms provided by the interconnect and the os  they do not hide the fact that communication takes place  and as such do not attempt to present the cluster as a single machine citation needed    unlike other process vms  these systems do not provide a specific programming language  but are embedded in an existing language  typically such a system provides bindings for several languages  e g   c and fortran  citation needed examples are pvm  parallel virtual machine  and mpi  message passing interface   they are not strictly virtual machines  as the applications running on top still have access to all os services  and are therefore not confined to the system model     this approach is described as full virtualization of the hardware  and can be implemented using a type   or type   hypervisor   a type   hypervisor runs directly on the hardware  a type   hypervisor runs on another operating system  such as linux   each virtual machine can run any operating system supported by the underlying hardware  users can thus run two or more different  guest  operating systems simultaneously  in separate  private  virtual computers     the pioneer system using this concept was ibm s cp     the first        version of ibm s cp cms             and the precursor to ibm s vm family       present   with the vm architecture  most users run a relatively simple interactive computing single user operating system  cms  as a  guest  on top of the vm control program  vm cp   this approach kept the cms design simple  as if it were running alone  the control program quietly provides multitasking and resource management services  behind the scenes   in addition to cms communication and other system tasks are performed by multitasking vms  rscs  gcs  tcp ip  unix   and users can run any of the other ibm operating systems  such as mvs  even a new cp itself or now z os  even the simple cms could be run in a threaded environment  listserv  trickle   z vm is the current version of vm  and is used to support hundreds or thousands of virtual machines on a given mainframe  some installations use linux for zseries to run web servers  where linux runs as the operating system within many virtual machines     full virtualization is particularly helpful in operating system development  when experimental new code can be run at the same time as older  more stable  versions  each in a separate virtual machine  the process can even be recursive  ibm debugged new versions of its virtual machine operating system  vm  in a virtual machine running under an older version of vm  and even used this technique to simulate new hardware      the standard x   processor architecture as used in the modern pcs does not actually meet the popek and goldberg virtualization requirements  notably  there is no execution mode where all sensitive machine instructions always trap  which would allow per instruction virtualization     despite these limitations  several software packages have managed to provide virtualization on the x   architecture  even though dynamic recompilation of privileged code  as first implemented by vmware  incurs some performance overhead as compared to a vm running on a natively virtualizable architecture such as the ibm system     or motorola mc       by now  several other software packages such as virtual pc  virtualbox  parallels workstation and virtual iron manage to implement virtualization on x   hardware     intel and amd have introduced features to their x   processors to enable virtualization in hardware     as well as virtualization of the resources of a single machine  multiple independent nodes in a cluster can be combined and accessed as a single virtual numa machine      virtual machines can also perform the role of an emulator  allowing software applications and operating systems written for another computer processor architecture to be run     some virtual machines emulate hardware that only exists as a detailed specification  for example     this technique allows diverse computers to run any software written to that specification  only the virtual machine software itself must be written separately for each type of computer on which it runs     operating system level virtualization is a server virtualization technology which virtualizes servers on an operating system  kernel  layer  it can be thought of as partitioning  a single physical server is sliced into multiple small partitions  otherwise called virtual environments  ve   virtual private servers  vps   guests  zones  etc    each such partition looks and feels like a real server  from the point of view of its users     for example  solaris zones supports multiple guest oss running under the same os  such as solaris      all guest oss have to use the same kernel level and cannot run as different os versions  solaris native zones also requires that the host os be a version of solaris  other oss from other manufacturers are not supported citation needed however one would need to use solaris branded zones to use other oss as zones     another example is system workload partitions  wpars   introduced in the ibm aix     operating system  system wpars are software partitions running under one instance of the global aix os environment     the operating system level architecture has low overhead that helps to maximize efficient use of server resources  the virtualization introduces only a negligible overhead and allows running hundreds of virtual private servers on a single physical server  in contrast  approaches such as full virtualization  like vmware  and paravirtualization  like xen or uml  cannot achieve such level of density  due to overhead of running multiple kernels  from the other side  operating system level virtualization does not allow running different operating systems  i e  different kernels   although different libraries  distributions  etc  are possible  