 bytecode  also known as p code  portable code   is a form of instruction set designed for efficient execution by a software interpreter  unlike human readable source code  bytecodes are compact numeric codes  constants  and references  normally numeric addresses  which encode the result of parsing and semantic analysis of things like type  scope  and nesting depths of program objects  they therefore allow much better performance than direct interpretation of source code     the name bytecode stems from instruction sets which have one byte opcodes followed by optional parameters  intermediate representations such as bytecode may be output by programming language implementations to ease interpretation  or it may be used to reduce hardware and operating system dependence by allowing the same code to run on different platforms  bytecode may often be either directly executed on a virtual machine  i e  interpreter   or it may be further compiled into machine code for better performance     since bytecode instructions are processed by software  they may be arbitrarily complex  but are nonetheless often akin to traditional hardware instructions  virtual stack machines are the most common  but virtual register machines have also been built    different parts may often be stored in separate files  similar to object modules  but dynamically loaded during execution     a bytecode program may be executed by parsing and directly executing the instructions  one at a time  this kind of bytecode interpreter is very portable  some systems  called dynamic translators  or  just in time   jit  compilers  translate bytecode into machine language as necessary at runtime  this makes the virtual machine hardware specific  but doesn t lose the portability of the bytecode itself  for example  java and smalltalk code is typically stored in bytecoded format  which is typically then jit compiled to translate the bytecode to machine code before execution  this introduces a delay before a program is run  when bytecode is compiled to native machine code  but improves execution speed considerably compared to direct interpretation of the source code normally by several magnitudes citation needed    because of its performance advantage  today many language implementations execute a program in two phases  first compiling the source code into bytecode  and then passing the bytecode to the virtual machine  there are bytecode based virtual machines of this sort for java  python  php   tcl  and forth  however  forth is not ordinarily compiled via bytecodes in this way  and its virtual machine is more generic instead   the implementation of perl and ruby     instead work by walking an abstract syntax tree representation derived from the source code     more recently  the authors of the v   and dart  languages have challenged the notion that intermediate bytecode is a necessity for fast and efficient vm implementation  both of these language implementations currently do direct jit compilation from source code to machine code without any bytecode intermediary   