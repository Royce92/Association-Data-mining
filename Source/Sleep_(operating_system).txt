 a computer program  process  task  or thread  may sleep  which places it into an inactive state for a period of time  eventually the expiration of an interval timer  or the receipt of a signal or interrupt causes the program to resume execution             a typical sleep system call takes a time value as a parameter  specifying the minimum amount of time that the process is to sleep before resuming execution  the parameter typically specifies seconds  although some operating systems provide finer resolution  such as milliseconds or microseconds     on windows  the sleep   function takes a single parameter of the number of milliseconds to sleep    the sleep   function is included in kernel   dll  but no sleep command  executable  is natively available for scripts  batch files   it can be found in collections of windows utilities like windows      resource kit       on unix like operating systems  the sleep   function is called providing a single parameter of type unsigned integer of the number of seconds to sleep     for more precise sleep times one can use the usleep   function        in windows os     in unix     sleep causes the thread or process to give up the remainder of its time slice and stay in the not runnable state for the specified duration  while there is generally a guarantee for the minimum time period  there is no strict guarantee that the thread will run immediately or soon  or even at all  once the specified time has passed  it is up to the scheduler s discretion  and dependent on thread priorities and implementation details such as timer resolutions when the sleeping thread will run again  on posix systems  the nanosleep and related syscalls are interruptible by signals  returning the remaining sleep time  the sleep library function  on the other hand  is implemented via the alarm syscall on many older systems  thus it only works by delivering a signal  the windows sleep function is non interruptible due to absence of signals  other than the thread or its process being terminated   although the related sleepex function can be used to put the thread into an alertable state  allowing apc calls being made while the thread is sleeping  also  a thread can technically be  interrupted  in case e g  the process terminates due to an exception in a different thread     some system programs that never terminate execute an event loop  going to sleep at the start of each cycle and waiting for some event to awaken them  once an event is received  the program services the event  then returns to the beginning of the next wait cycle     other programs periodically poll for events by going to sleep and resuming execution after a specific interval of time  once execution is resumed  the program polls for events or status changes  and then services any that occurred while it was asleep  after servicing the events  the program then goes to sleep again for the next time interval  certain kinds of heartbeat events or keep alive signals can be generated by these kinds of programs     an uninterruptible sleep state is a sleep state that won t handle a signal right away  it will wake only as a result of a waited upon resource becoming available or after a time out occurs during that wait  if specified when put to sleep   it is mostly used by device drivers waiting for disk or network io  input output   when the process is sleeping uninterruptibly  signals accumulated during the sleep will be noticed when the process returns from the system call or trap     in unix like systems the command  ps  l  uses code  d  for the uninterruptible sleep state of a process  