 in computer programming  an application programming interface  api  is a set of routines  protocols  and tools for building software applications  an api expresses a software component in terms of its operations  inputs  outputs  and underlying types  an api defines functionalities that are independent of their respective implementations  which allows definitions and implementations to vary without compromising each other  a good api makes it easier to develop a program by providing all the building blocks  a programmer then puts the blocks together     in addition to accessing databases or computer hardware  such as hard disk drives or video cards  an api can ease the work of programming gui components  for example  an api can facilitate integration of new features into existing applications  a so called  plug in api    an api can also assist otherwise distinct applications with sharing data  which can help to integrate and enhance the functionalities of the applications     apis often come in the form of a library that includes specifications for routines  data structures  object classes  and variables  in other cases  notably soap and rest services  an api is simply a specification of remote calls exposed to the api consumers      an api specification can take many forms  including an international standard  such as posix  vendor documentation  such as the microsoft windows api  or the libraries of a programming language  e g   the standard template library in c   or the java apis     an api differs from an application binary interface  abi  in that an api is source code based while an abi is a binary interface  for instance posix is an api  while the linux standard base provides an abi                 in most procedural languages  an api specifies a set of functions or routines that accomplish a specific task or are allowed to interact with a specific software component  this specification is presented in a human readable format in paper books or in electronic formats like ebooks or as man pages  for example  the math api on unix systems is a specification on how to use the mathematical functions included in the math library  among these functions there is a function  named sqrt    that can be used to compute the square root of a given number     the unix command man   sqrt presents the signature of the function sqrt in the form     this description means that sqrt   function returns the square root of a positive floating point number  single or double precision   as another floating point number     hence the api in this case can be interpreted as the collection of the include files used by a program  written in the c language  to reference that library function  and its human readable description provided by the man pages     similarly  other languages have procedural libraries  for example  perl has dedicated apis for the same mathematical task with built in documentation available  which is accessible using the perldoc utility     in its simplest form  an object api is a description of how objects work in a given object oriented languagexa    usually it is expressed as a set of classes with an associated list of class methods     for example  in the java language  if the class scanner is to be used  a class that reads input from the user in text based programs   it is required to import the java util scanner library  so objects of type scanner can be used by invoking some of the class  methods     in the example above  methods nextline   and close   are part of the api for the scanner class  and hence are described in the documentation for that api  e g      public string nextline      advances this scanner past the current line and returns the input that was skipped         returns     the line that was skipped    throws     nosuchelementexception   if no line was found    illegalstateexception   if this scanner is closed    more generally  in object oriented languages  an api usually includes a description of a set of class definitions  with a set of behaviors associated with those classes  this abstract concept is associated with the real functionality exposed  or made available  by the classes that are implemented in terms of class methods  or more generally by all its public components hence all public methods  but also possibly including any internal entity made public like  fields  constants  nested objects  enums  etc       the api in this case can be conceived of as the totality of all the methods publicly exposed by the classes  usually called the class interface   this means that the api prescribes the methods by which one interacts with handles the objects derived from the class definitions     more generally  one can see the api as the collection of all the kinds of objects one can derive from the class definitions  and their associated possible behaviors  again  the use is mediated by the public methods  but in this interpretation  the methods are seen as a technical detail of how the behavior is implemented     for instance  a class representing a stack can simply expose publicly two methods push    to add a new item to the stack   and pop    to extract the last item  ideally placed on top of the stack      in this case the api can be interpreted as the two methods pop   and push    or  more generally  as the idea that one can use an item of type stack that implements the behavior of a stack  a pile exposing its top to add remove elements  the second interpretation appears more appropriate in the spirit of object orientation     this concept can be carried to the point where a class interface in an api has no methods at all  but only behaviors associated with it  for instance  the java and lisp language apis include the interface named serializable  which is a marker interface that requires each class implementing it to behave in a serialized fashion  this does not require implementation of a public method  but rather requires any class which implements this interface to be based on a representation that can be saved  serialized  at any time a    similarly the behavior of an object in a concurrent  multi threaded  environment is not necessarily determined by specific methods  belonging to the interface implemented  but still belongs to the api for that class of objects  and should be described in the documentation      in this sense  in object oriented languages  the api defines a set of object behaviors  possibly mediated by a set of class methods     in such languages  the api is still distributed as a library  for example  the java language libraries include a set of apis that are provided in the form of the jdk used by the developers to build new java programs  the jdk includes the documentation of the api in javadoc notation     the quality of the documentation associated with an api is often a factor determining its success in terms of ease of use     an api is usually related to a software library  the api describes and prescribes the expected behavior while the library is an actual implementation of this set of rules  a single api can have multiple implementation  or none  being abstract  in the form of different libraries that share the same programming interface     an api can also be related to a software framework  a framework can be based on several libraries implementing several apis  but unlike the normal use of an api  the access to the behavior built into the framework is mediated by extending its content with new classes plugged into the framework itself  moreover the overall program flow of control can be out of the control of the caller  and in the hands of the framework via inversion of control or a similar mechanism       an api can also be an implementation of a protocol     when an api implements a protocol it can be based on proxy methods for remote invocations that underneath rely on the communication protocol  the role of the api can be exactly to hide the detail of the transport protocol  e g   rmi is an api that implements the jrmp protocol or the iiop as rmi iiop     protocols are usually shared between different technologies  system based on given computer programming languages in a given operating system  and usually allow the different technologies to exchange information  acting as an abstraction mediation level between the two different environments  apis are usually specific to a given technology  hence the apis of a given language cannot be used in other languages  unless the function calls are wrapped with specific adaptation libraries     to enable the exchange of information among systems that use different technologies  when an api implements a protocol  it can prescribe a language neutral message format  e g  soap uses xml as a general container for the messages to be exchanged     an object api can prescribe a specific object exchange format which is usable locally within an application  while an object exchange protocol can define a way to transfer the same kind of information in a message sent to a remote system     when a message is exchanged via a protocol between two different platforms using objects on both sides  the object in a programming language can be transformed  marshalled and unmarshalled  in an object in a remote and different language  so  e g   a program written in java invokes a service via soap or iiop written in c  both programs use apis for remote invocation  each locally to the machine where they are working  to  remotely  exchange information that they both convert from to an object in local memory     instead when a similar object is exchanged via an api local to a single machine the object is effectively exchanged  or a reference to it  in memory  e g  via memory allocated by a single process  or among multiple processes using shared memory  an application server  or other sharing technologies like tuple spaces     an object remoting api is based on a remoting protocol  such as corba  that allows remote object method invocation  a method call  executed locally on a proxy object  invokes the corresponding method on the remote object  using the remoting protocol  and acquires the result to be used locally as return value     when remoting is in place  a modification on the proxy object corresponds to a modification on the remote object  when only an object transfer takes place  the modification to the local copy of the object is not reflected on the original object  unless the object is sent back to the sending system     some languages like those running in a virtual machine  e g   net cli compliant languages in the common language runtime  clr   and jvm compliant languages in the java virtual machine  can share an api  in this case  a virtual machine enables language interoperability  by abstracting a programming language using an intermediate bytecode and its language bindings  in these languages  the compiler performs just in time compilation or ahead of time compilation transforming the source code  possibly written in multiple languages  into its language independent bytecode representation     for instance  through the bytecode representation  a program written in groovy or scala language can use any standard java class and hence any java api  this is possible thanks to the fact both groovy and scala have an object model that is a superset of that of the java language  thus  any api exposed via a java object is accessible via groovy or scala by an equivalent object invocation translated in bytecode     on the other side  groovy and scala introduce first class entities that are not present in java  like closures  these entities cannot be natively represented in java language  java   introduced the concept of lambda expression   thus  in order to enable interoperation a closure is encapsulated in a standard java object  in this case the closure invocation is mediated by a method named call   which is always present in an closure object as seen by java  and in java the closure does not represent a first class entity     web apis are the defined interfaces through which interactions happen between an enterprise and applications that use its assets  an api approach is an architectural approach that revolves around providing programmable interfaces to a set of services to different applications serving different types of consumers   when used in the context of web development  an api is typically defined as a set of hypertext transfer protocol  http  request messages  along with a definition of the structure of response messages  which is usually in an extensible markup language  xml  or javascript object notation  json  format  while  web api  historically has been virtually synonymous for web service  the recent trend  so called web      has been moving away from simple object access protocol  soap  based web services and service oriented architecture  soa  towards more direct representational state transfer  rest  style web resources and resource oriented architecture  roa    part of this trend is related to the semantic web movement toward resource description framework  rdf   a concept to promote web based ontology engineering technologies  web apis allow the combination of multiple apis into new applications known as mashups      the practice of publishing apis has allowed web communities to create an open architecture for sharing content and data between communities and applications  in this way  content that is created in one place can be dynamically posted and updated in multiple locations on the web     the posix standard defines an api that allows writing a wide range of common computing functions in a way such that they can operate on many different systems  mac os x  and various berkeley software distributions  bsds  implement this interface   however  using this requires re compiling for each platform  a compatible api  on the other hand  allows compiled object code to function with no changes to the system that implements that api  this is beneficial to both software providers  where they may distribute existing software on new systems without producing and  distributing upgrades  and users  where they may install older software on their new systems without purchasing upgrades   although this generally requires that various software libraries implement the necessary apis as well     microsoft has shown a strong commitment to a backward compatible api  particularly within their windows api  win    library  such that older applications may run on newer versions of windows using an executable specific setting called  compatibility mode        among unix like operating systems  there are many related but incompatible operating systems running on a common hardware platform  particularly intel       compatible systems   there have been several attempts to standardize the api such that software vendors may distribute one binary application for all these systems  however  to date  none of these has met with much success  the linux standard base is attempting to do this for the linux platform  while many of the bsd unixes  such as freebsd  netbsd  and openbsd  implement various levels of api compatibility for both backward compatibility  allowing programs written for older versions to run on newer distributions of the system  and cross platform compatibility  allowing execution of foreign code without recompiling      the main policies for releasing an api are     a mix of the two behaviors can be used as well     an api can be developed for a restricted group of users  or it can be released to the public     an important factor when an api becomes public is its interface stability  if the developer of an api changes a part of it  for example by adding new parameters to some function calls  it could break the compatibility with all clients that depend on or use that api     when parts of a publicly presented api are subject to change and thus not stable  such parts of a particular api should be explicitly documented as unstable  for example  in the google guava library the parts that are considered unstable  and that might change in a near future  are marked with the java annotation  beta       a public api can sometimes declare parts of itself as deprecated  this usually means that such part of an api should be considered candidated for being removed  or modified in a backward incompatible way     when adopting a third party public api  developers should consider the deprecation policy used by the producer of that api  if a developer publicly releases a solution based on an api that becomes deprecated  he she might be unable to guarantee the provided service     professional level documentation for an api should strive to include the following parts     the reference documentation for an api is an intrinsic part of any api  and without it the api is unusable  every aspect of the api  no matter how trivial  should be stated explicitly     when an api documents a library of functions in a procedural language it should include     an object api should document     an api in a language using exception handling should report any kind of exception possibly thrown and the specific condition that can cause them to happen     an api that can be used in a concurrent environment should include indications on how its behavior changes due to possible concurrent access to it  general usability in a concurrent context and possible race conditions     an api with unstable parts should document them as unstable     an api with deprecated parts should document them as deprecated     an api that implements a communications protocol should indicate its general behavior  which should includes details on     a graphical api should document     an api used to interact with a device should document the interaction with it an hence     an api should always indicate where it applies to  version number of the language  library  and of any other resource it depends upon  the version of the protocols it is compatible with or that it implements  if any  and the version of the operative system or platform it supports     an api that can be used in multiple languages via some form of language inter operation should document any restrictions to its usage in case of usage from different languages from its native language     api documentation can be enriched using metadata information  like java annotation  or cli metadata  this metadata can be used by the compiler  tools  and by the run time environment to implement custom behaviors or custom handling     in       oracle sued google for having distributed a new implementation of java embedded in the android operating system    google had not acquired any permission to reproduce the java api  although a similar permission had been given to the openjdk project  judge william alsup ruled in the oracle v  google case that apis cannot be copyrighted in the u s  and that a victory for oracle would have widely expanded copyright protection and allowed the copyrighting of simple software commands     to accept oracle s claim would be to allow anyone to copyright one version of code to carry out a system of commands and thereby bar all others from writing their own different versions to carry out all or part of the same commands         in       however  alsup s ruling was overturned on appeal  although the question of whether such use of apis constitutes fair use was left unresolved            saw the creation of the  api commons  initiative    api commons is a common place to publish and share your own api specifications and data models in any format such as swagger  api blueprint or raml  as well as to explore and discover the api designs of others  the api specifications and data models declared in api commons are available publicly under the creative commons license     apis that are intended to be used by more than one high level programming language often provide  or are augmented with  facilities to automatically map the api to features  syntactic or semantic  that are more natural in those languages  this is known as language binding  and is itself an api  the aim is to encapsulate most of the required functionality of the api  leaving a  thin  layer appropriate to each language     below are listed some interface generator tools that bind languages to apis at compile time  