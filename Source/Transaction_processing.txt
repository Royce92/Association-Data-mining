 in computer science  transaction processing is information processing that is divided into individual  indivisible operations called transactions  each transaction must succeed or fail as a complete unit  it can never be only partially complete     for example  when you purchase a book from an online bookstore  you exchange money  in the form of credit  for a book  if your credit is good  a series of related operations ensures that you get the book and the bookstore gets your money  however  if a single operation in the series fails during the exchange  the entire exchange fails  you do not get the book and the bookstore does not get your money  the technology responsible for making the exchange balanced and predictable is called transaction processing  transactions ensure that data oriented resources are not permanently updated unless all operations within the transactional unit complete successfully  by combining a set of related operations into a unit that either completely succeeds or completely fails  one can simplify error recovery and make one s application more reliable     transaction processing systems consist of computer hardware and software hosting a transaction oriented application that performs the routine transactions necessary to conduct business  examples include systems that manage sales order entry  airline reservations  payroll  employee records  manufacturing  and shipping     since most  though not necessarily all  transaction processing today is interactive the term is often treated as synonymous with online transaction processing             transaction processing is designed to maintain a system s integrity  typically a database or some modern filesystems  in a known  consistent state  by ensuring that interdependent operations on the system are either all completed successfully or all canceled successfully     for example  consider a typical banking transaction that involves moving      from a customer s savings account to a customer s checking account  this transaction involves at least two separate operations in computer terms  debiting the savings account by       and crediting the checking account by       if one operation succeeds but the other does not  the books of the bank will not balance at the end of the day  there must therefore be a way to ensure that either both operations succeed or both fail  so that there is never any inconsistency in the bank s database as a whole     transaction processing links multiple individual operations in a single  indivisible transaction  and ensures that either all operations in a transaction are completed without error  or none of them are  if some of the operations are completed but errors occur when the others are attempted  the transaction processing system  rolls back  all of the operations of the transaction  including the successful ones   thereby erasing all traces of the transaction and restoring the system to the consistent  known state that it was in before processing of the transaction began  if all operations of a transaction are completed successfully  the transaction is committed by the system  and all changes to the database are made permanent  the transaction cannot be rolled back once this is done     transaction processing guards against hardware and software errors that might leave a transaction partially completed  if the computer system crashes in the middle of a transaction  the transaction processing system guarantees that all operations in any uncommitted transactions are cancelled     generally  transactions are issued concurrently  if they overlap  i e  need to touch the same portion of the database   this can create conflicts  for example  if the customer mentioned in the example above has      in his savings account and attempts to transfer      to a different person while at the same time moving      to the checking account  only one of them can succeed  however  forcing transactions to be processed sequentially is inefficient  therefore  concurrent implementations of transaction processing is programmed to guarantee that the end result reflects a conflict free outcome  the same as could be reached if executing the transactions sequentially in any order  a property called serializability   in our example  this means that no matter which transaction was issued first  either the transfer to a different person or the move to the checking account succeeds  while the other one fails     the basic principles of all transaction processing systems are the same  however  the terminology may vary from one transaction processing system to another  and the terms used below are not necessarily universal     transaction processing systems ensure database integrity by recording intermediate states of the database as it is modified  then using these records to restore the database to a known state if a transaction cannot be committed  for example  copies of information on the database prior to its modification by a transaction are set aside by the system before the transaction can make any modifications  this is sometimes called a before image   if any part of the transaction fails before it is committed  these copies are used to restore the database to the state it was in before the transaction began     it is also possible to keep a separate journal of all modifications to a database  sometimes called after images   this is not required for rollback of failed transactions but it is useful for updating the database in the event of a database failure  so some transaction processing systems provide it  if the database fails entirely  it must be restored from the most recent back up  the back up will not reflect transactions committed since the back up was made  however  once the database is restored  the journal of after images can be applied to the database  rollforward  to bring the database up to date  any transactions in progress at the time of the failure can then be rolled back  the result is a database in a consistent  known state that includes the results of all transactions committed up to the moment of failure     in some cases  two transactions may  in the course of their processing  attempt to access the same portion of a database at the same time  in a way that prevents them from proceeding  for example  transaction a may access portion x of the database  and transaction b may access portion y of the database  if  at that point  transaction a then tries to access portion y of the database while transaction b tries to access portion x  a deadlock occurs  and neither transaction can move forward  transaction processing systems are designed to detect these deadlocks when they occur  typically both transactions will be cancelled and rolled back  and then they will be started again in a different order  automatically  so that the deadlock doesn t occur again  or sometimes  just one of the deadlocked transactions will be cancelled  rolled back  and automatically restarted after a short delay     deadlocks can also occur among three or more transactions  the more transactions involved  the more difficult they are to detect  to the point that transaction processing systems find there is a practical limit to the deadlocks they can detect     in systems where commit and rollback mechanisms are not available or undesirable  a compensating transaction is often used to undo failed transactions and restore the system to a previous state     jim gray defined properties of a reliable transaction system in the late     s under the acronym acid   atomicity  consistency  isolation  and durability      a transaction s changes to the state are atomic  either all happen or none happen  these changes include database changes  messages  and actions on transducers     consistency  a transaction is a correct transformation of the state  the actions taken as a group do not violate any of the integrity constraints associated with the state     even though transactions execute concurrently  it appears to each transaction t  that others executed either before t or after t  but not both     once a transaction completes successfully  commits   its changes to the state survive failures     transaction processing has these benefits     standard transaction processing software  notably ibm s information management system  was first developed in the     s  and was often closely coupled to particular database management systems  client server computing implemented similar principles in the     s with mixed success  however  in more recent years  the distributed client server model has become considerably more difficult to maintain  as the number of transactions grew in response to various online services  especially the web   a single distributed database was not a practical solution  in addition  most online systems consist of a whole suite of programs operating together  as opposed to a strict client server model where the single server could handle the transaction processing  today a number of transaction processing systems are available that work at the inter program level and which scale to large systems  including mainframes     one well knowncitation needed  and open  industry standard is the x open distributed transaction processing  dtp   see also jta the java transaction api   however  proprietary transaction processing environments such as ibm s cics are still very popular citation needed although cics has evolved to include open industry standards as well     the term  extreme transaction processing   xtp  has been used to describe transaction processing systems with uncommonly challenging requirements  particularly throughput requirements  transactions per second   such systems may be implemented via distributed or cluster style architectures  