 multitenancy refers to a software architecture in which a single instance of a software runs on a server and serves multiple tenants  a tenant is a group of users who share a common access with specific privileges to the software instance  with a multitenant architecture  a software application is designed to provide every tenant a dedicated share of the instance including its data  configuration  user management  tenant individual functionality and non functional properties  multitenancy contrasts with multi instance architectures  where separate software instances operate on behalf of different tenants       commentators regard multitenancy as an important feature of cloud computing               multitenant applications have evolved from and combine some characteristics of three types of services     in a multitenancy environment  multiple customers share the same application  running on the same operating system  on the same hardware  with the same data storage mechanism  the distinction between the customers is achieved during application design  thus customers do not share or see each other s data  compare this with virtualization where components are transformed  enabling each customer application to appear to run on a separate virtual machine      some companies actively promote the principle of multitenancy and use it as a source of competitive differentiation       multitenancy allows for cost savings over and above the basic economies of scale achievable from consolidating it resources into a single operation   an application instance usually incurs a certain amount of memory and processing overhead which can be substantial when multiplied by many customers  especially if the customers are small  multitenancy reduces this overhead by amortizing it over many customers  further cost savings may come from licensing costs of the underlying software  such as operating systems and database management systems   put crudely  if you can run everything on a single software instance  you only have to buy one software license  the cost savings can be eclipsed by the difficulty of scaling the single instance as demand grows   increasing the performance of the instance on a single server can only be done by buying faster hardware  such as fast cpus  more memory  and faster disk systems  and typically these costs grow faster than if the load was split between multiple servers with roughly the same aggregate capacity citation needed in addition  development of multitenant systems is more complex  and security testing is more stringent owing to the fact that multiple customers  data is being co mingled     one of the most compelling reasons for vendors isvs to utilize multitenancy is for the inherent data aggregation benefits  instead of collecting data from multiple data sources  with potentially different database schemas  all data for all customers is stored in a single database schema  thus  running queries across customers  mining data  and looking for trends is much simpler  this reason is probably overhyped as one of the core multitenancy requirements is the need to prevent service provider access to customer  tenant  information  further  it is common to separate the operational database from the mining database  usually because of different workload characteristics   thus weakening the argument even more     because of the additional customization complexity and the need to maintain per tenant metadata  multitenant applications require a larger development effort     multitenancy simplifies the release management process  in a traditional release management process  packages containing code and database changes are distributed to client desktop and or server machines  these packages then have to be installed on each individual machine  with the multitenant model  the package typically only needs to be installed on a single server  this greatly simplifies the release management process     at the same time  multitenancy increases the risks and impacts inherent in applying a new release version  as there is a single software instance serving multiple tenants  an update on this instance may cause downtime for all tenants even if the update is requested and useful for only one tenant  also  some bugs and issues resulted from applying the new release could manifest in other tenants  personalized view of the application  because of possible downtime  the moment of applying the release may be restricted depending on time usage schedule of more than one tenant     multitenant applications are typically required to provide a high degree of customization to support each target organization s needs  customization typically includes the following aspects     multitenant applications are expected to provide adequate isolation of security  robustness and performance between multiple tenants which is provided by the layers below the application in case of multi instance applications     the costs of redesigning applications for multitenancy can be significant  especially for software vendors who continue to offer an on premise single tenant version of their product  they end up being forced to support   distinct products with all the resulting costs     an increasingly viable alternative route to multitenancy that eliminates the need for significant architectural change is to use virtualization technology to host multiple isolated instances of an application on one or more servers  indeed  when applications are repackaged as virtual appliances the same appliance image can be deployed in isv hosted  on premise or trusted third party locations and even migrated from one deployment site to another over time  