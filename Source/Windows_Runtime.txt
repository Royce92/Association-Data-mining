 windows runtime  or winrt  is a platform homogeneous application architecture on the windows   operating system  winrt supports development in c   cx  component extensions  a language based on c    and the managed languages c  and vb net  as well as javascript and typescript  winrt applications natively support both the x   and arm architectures  and also run inside a sandboxed environment to allow for greater security and stability    winrt components are designed with interoperability between multiple languages and apis in mind  including native  managed and scripting languages     windows phone   uses a version of the windows runtime known as the windows phone runtime   it enables app development in c   vb net and development of windows runtime components in c   cx             winrt is implemented in the c   programming language  and is object oriented by design    its predecessor  win   api is written mostly in the c programming language    it is an unmanaged application programming interface  api  based on component object model  com  that allows interfacing from multiple languages  just as com does  the api definitions  however  are stored in   winmd  files  which are encoded in ecma     metadata format  the same format that  net framework uses with a few modifications  unreliable source  this common metadata format allows for significantly less overhead when invoking winrt from  net applications compared to p invoke  and much simpler syntax  unreliable source     the new c   cx  component extensions  language  which borrows some c   cli syntax  allows the authoring and consumption of winrt components with less glue visible to the programmer compared to classic com programming in c    and at the same time imposes fewer restrictions compared to c   cli on the mixing of types  the component extensions of c   cx are recommended to be used only at the api boundary  not for other purposes   regular c    with com specific discipline  can also be used to program with winrt components   with the help of the new windows runtime c   template library  wrl   which is similar in purpose to what active template library provides for com       winrt applications run within a sandbox and require explicit user approval to access critical os features and underlying hardware  file access is restricted to several predetermined locations  such as documents or pictures     winrt applications for windows rt  windows   and beyond are packaged in the  appx file format  based upon open packaging conventions  it uses a zip format with additional xml files    winrt applications are primarily distributed through an application store known as windows store  where winrt software  referred to as windows store apps  can be downloaded and purchased by end users  winrt apps can only be sideloaded from outside windows store on windows   or rt systems that are part of a windows domain  or equipped with a special activation key obtained from microsoft             in a major departure from win   and similarly to  net framework      most apis which are expected to take significant time to complete are implemented as asynchronous  the application dispatches the api call  which immediately returns freeing the application to perform other tasks while waiting for the results    asynchronous model requires new programming language constructs  async keyword and await operator in c  and visual basic  task class and  then method in c   which are provided by the winrt sdk  promise keyword and then function in javascript html    similar to try catch used in exception handling  parts of the api that require asynchronous access include on screen messages and dialogs  file access  internet connectivity  sockets  streams  devices and services  and calendar  contacts and appointments     the metadata describes the code written for the winrt platform  it defines a programming model that makes it possible to write object oriented code that can be shared across programming languages  it also enables services like reflection     herb sutter  c   expert at microsoft  explained during his session on c   at the      build conference that the winrt metadata is cli metadata   native code  i e   processor specific machine code  cannot contain metadata and it is then stored in separate winmd files that can be reflected just like ordinary cli assemblies       because it is cli metadata the programmer can then use code written in native winrt languages from managed cli languages     winrt has a rich object oriented class based type system that is built on the metadata  it supports constructs with corresponding constructs that are found in the  net framework  classes  methods  properties  delegates and events     one of the major additions to winrt relative to com is the cross abi   net style generics  in c   cx these are declared using the generic keyword with a syntax very similar to that of the template keyword  winrt classes  ref classes  can also be genericized using c   templates but only template instantiations can be exported to  winmd metadata  with some name mangling   unlike winrt generics which preserve their genericity in the metadata  winrt also provides a library of generic containers that parallel those from the c   standard library  as well as some back and forth conversion functions  the consumption of winrt collections in  net languages  e g  c  and vb  as well as in javascript is more transparent than in the case of c    with automated mappings into their natural equivalents taking place behind the scenes  when authoring a winrt component in a managed language  some extra  com style rules need to be followed  e g   net framework collection types cannot be declared as return types  but only the winrt interfaces that they implement can be used at the component boundary     classes that are compiled to target the winrt are called winrt components  they are classes that can be written in any supported language and for any supported platform  the key is the metadata  this metadata makes it possible to interface with the component from any other winrt language  the runtime requires winrt components that are built with  net framework to use the defined interface types or  net type interfaces  which automatically map to the first named  inheritance is as yet not supported in managed winrt components  except for xaml classes       programs and libraries targeted for the winrt runtime can be created and consumed from a number of platforms and programming languages  notably c c    either with language extensions offering first class support for winrt concepts  or with a lower level template library allowing to write code in standard c      net  c  and vb net  and javascript  this is made possible by the metadata     in winrt terminology  a language binding is referred to as a language projection     native c   is a  first class citizen  of the winrt platform  to use winrt from c   two supported options are available  wrl an atl style template library and c   cx  c   with component extensions  which resembles c   cli    because of the internal consumption requirements at microsoft  wrl is exception free  meaning its return value discipline is hresult based just like that of com    c   cx on the other hand wraps up calls to winrt with code that does error checking and throws exceptions as appropriate       c   cx has a number of extensions that enable integration with the platform and its type system  the syntax resembles the one of c   cli although it produces native code and metadata that integrates with the runtime  for example winrt objects may be allocated with ref new  which is the counterpart of gcnew from c   cli  the hat operator  ^  retains its meaning  however in the case where both the caller and callee are written in c   and living in the same process  a hat reference is simply a pointer to a vptr to a vtable       an addition to c   cx relative to traditional c   com programming are partial classes  again inspired from  net  these allow for instance xaml code to be translated into c   code by tools and then combined with human written code to produce the complete class while allowing clean separation of the machine generated and human edited parts of a class implementation into different files     winrt is a native platform and supports any native c   code  a c   developer can reuse existing native c c   libraries with the only need to use the language extensions when writing code that is interfacing with the runtime     despite claims of interoperability between multiple languages  a practical attempt to implement independent binding to winrt for a native language is currently doomed to fail    allen bauer wrote     due to this unsolved issue recent delphi compilers feature metropolis instead of metro  in order to display a live tile a metropolis application uses additional proxy application       the  net framework and the common language runtime  clr  are integrated into the winrt as a subplatform  it also has influenced and set the standards for the ecosystem through the metadata format and libraries  the clr provides services like jit compilation code and garbage collection  winrt applications using  net languages use the new windows runtime xaml framework  and are primarily written in c   vb net  and for the first time for xaml  with native code using c   cx  although not yet officially supported  programs can also be written in other  net languages     limitationsnclasses defined in winrt components that are built in managed  net languages must be declared as sealed  so they cannot be derived from  however  non sealed winrt classes defined elsewhere can be inherited from in  net  their virtual methods overridden  and so on  but the inherited managed class must still be sealed      members that interface with another language must have a signature with winrt types or a managed type that is convertible to these       winrt applications can also be coded using html with javascript in code behind  which are run using the trident rendering engine and chakra javascript engine  both of which are also used by internet explorer  when coding a winrt app in javascript  its features are adapted to follow javascript naming conventions  and namespaces are also mapped to javascript objects     winrt comes with an application programming interface  api  in the form of a class library that exposes the features of windows   for the developer  like its immersive interface api  it is accessible and consumable from any supported language     the windows classes are native c c   libraries  unmanaged  that are exposed by the winrt  they provide access to all functionality from the xaml parser to the camera function     the naming conventions for the components  classes and other members  in the api are heavily influenced by the  net naming conventions which uses camel case  specifically pascalcase   microsoft recommends users to follow these rules in case where no others are given     these conventions are projected differently in some languages  like javascript  which converts it to its conventions and the other way around  this is to give a native and consistent experience regardless of the programming language     since windows runtime is projected to various languages  some restrictions on fundamental data types exist in order to host all of these languages  programmers have to be careful with the behavior of those types when used with public access  for method parameters  method return values  properties  etc         starting from windows phone   it is possible to develop apps using a version of the windows runtime called the windows phone runtime  wprt   although wp  brought limited support  the platform did eventually converge with windows     in windows phone         windows phone   has limited support for development and consuming of windows runtime components through windows phone runtime  many of the windows runtime apis in windows   that handle core operating system functionality have been ported to windows phone      support for development of native games using c   cx and directx has been added by request from the game development industry     the windows phone xaml framework is however still based on the same silverlight framework as in windows phone   for backwards compatibility  xaml development is therefore not currently possible in c   cx  development using either html  or winjs is unsupported on windows phone       windows runtime support on windows phone     converges with windows      the release brings a complete windows runtime api to the platform  including windows runtime xaml support  as well as language bindings for c   cx and html  javascript  there is also a project type called universal apps that enables apps to share code across windows phone     and windows     platforms     windows phone runtime uses the appx package format from windows    after previously been using silverlight xap     the windows phone   silverlight framework has been updated when  it can take advantage of some of the new features in the windows runtime  