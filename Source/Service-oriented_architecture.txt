 a service oriented architecture  soa  is a design pattern in which application components provide services to other components via a communications protocol  typically over a network  the principles of service orientation are independent of any vendor  product or technology      a service is a self contained unit of functionality  such as retrieving an online bank statement   by that definition  a service is a discretely invocable operation  however  in the web services description language  wsdl   a  service  is an interface definition that may list several discrete services or operations  elsewhere  the term is used for a component that is encapsulated behind an interface     services can be combined to provide the functionality of a large software application   soa makes it easier for software components on computers connected over a network to cooperate  every computer can run any number of services  and each service is built in a way that ensures that the service can exchange information with any other service in the network without human interaction and without the need to make changes to the underlying program itself             the oasis group  and the open group  have both created formal definitions  oasis defines soa as     a paradigm for organizing and utilizing distributed capabilities that may be under the control of different ownership domains  it provides a uniform means to offer  discover  interact with and use capabilities to produce desired effects consistent with measurable preconditions and expectations     the open group s definition is     service oriented architecture  soa  is an architectural style that supports service orientation     service orientation is a way of thinking in terms of services and service based development and the outcomes of services     a service     services are unassociated  loosely coupled units of functionality that are self contained  each service implements at least one action  such as submitting an online application for an account  retrieving an online bank statement or modifying an online booking or airline ticket order  within an soa  services use defined protocols that describe how services pass and parse messages using description metadata  which in sufficient details describes not only the characteristics of these services  but also the data that drives them  programmers have made extensive use of xml in soa to structure data that they wrap in a nearly exhaustive description container  analogously  the web services description language  wsdl  typically describes the services themselves  while soap  originally simple object access protocol  describes the communications protocols  soa depends on data and services that are described by metadata that should meet the following two criteria     the purpose of soa is to allow users to combine together fairly large chunks of functionality to form ad hoc applications built almost entirely from existing software services  the larger the chunks  the fewer the interfaces required to implement any given set of functionality  however  very large chunks of functionality may not prove sufficiently granular for easy reuse  each interface brings with it some amount of processing overhead  so there is a performance consideration in choosing the granularity of services     soa as an architecture relies on service orientation as its fundamental design principle  if a service presents a simple interface that abstracts away its underlying complexity  then users can access independent services without knowledge of the service s platform implementation      soa based solutions endeavour to enable business objectives while building an enterprise quality system  soa architecture is viewed as five horizontal layers      there are four cross cutting vertical layers  each of which are applied to and supported by each of horizontal layers     soa is based on the concept of a service  depending on the service design approach taken  each soa service is designed to perform one or more activities by implementing one or more service operations  as a result  each service is built as a discrete piece of code  this makes it possible to reuse the code in different ways throughout the application by changing only the way an individual service interoperates with other services that make up the application  versus making code changes to the service itself  soa design principles are used during software development and integration     soa generally provides a way for consumers of services  such as web based applications  to be aware of available soa based services  for example  several disparate departments within a company may develop and deploy soa services in different implementation languages  their respective clients will benefit from a well defined interface to access them     soa defines how to integrate widely disparate applications for a web based environment and uses multiple implementation platforms  rather than defining an api  soa defines the interface in terms of protocols and functionality  an endpoint is the entry point for such a soa implementation     service orientation requires loose coupling of services with operating systems and other technologies that underlie applications  soa separates functions into distinct units  or services   which developers make accessible over a network in order to allow users to combine and reuse them in the production of applications  these services and their corresponding consumers communicate with each other by passing data in a well defined  shared format  or by coordinating an activity between two or more services      for some  soa can be seen in a continuum from older concepts of distributed computing    and modular programming  through soa  and on to current practices of mashups  saas  and cloud computing  which some see as the offspring of soa        there are no industry standards relating to the exact composition of a service oriented architecture  although many industry sources have published their own principles  some of the principles published         include the following     this is the physical design of an individual service that encompasses all the resources used by a service  this would normally include databases  software components  legacy systems  identity stores  xml schemas and any backing stores  e g  shared directories  it is also beneficial to include any service agents employed by the service  as any change in these service agents would affect the message processing capabilities of the service     the  standardized service contract  design principle  keeps service contracts independent from their implementation  the service contract needs to be documented to formalize the required processing resources by the individual service capabilities  although it is beneficial to document details about the service architecture  the service abstraction design principle dictates that any internal details about the service are invisible to its consumers so that they do not develop any unstated couplings  the service architecture serves as a point of reference for evolving the service or gauging the impact of any change in the service     one of the core characteristics of services developed using the service orientation design paradigm is that they are composition centric  services with this characteristic can potentially address novel requirements by recomposing the same services in different configurations  service composition architecture is itself a composition of the individual architectures of the participating services  in the light of the service abstraction principle  this type of architecture only documents the service contract and any published service level agreement  sla   internal details of each service are not included     if a service composition is a part of another  parent  composition  the parent composition can also be referenced in the child service composition  the design of service composition also includes any alternate paths  such as error conditions  which may introduce new services into the current service composition     service composition is also a key technique in software integration  including enterprise software integration  business process composition and workflow composition     a service inventory is composed of services that automate business processes  it is important to account for the combined processing requirements of all services within the service inventory  documenting the requirements of services  independently from the business processes that they automate  helps identify processing bottlenecks  the service inventory architecture is documented from the service inventory blueprint  so that service candidates   can be redesigned before their implementation     this umbrella architecture incorporates service  composition  and inventory architectures  plus any enterprise wide technological resources accessed by these architectures e g  an erp system  this can be further supplemented by including enterprise wide standards that apply to the aforementioned architecture types  any segments of the enterprise that are not service oriented can also be documented in order to consider transformation requirements if a service needs to communicate with the business processes automated by such segments soa s main goal is to deliver agility to business    web services can implement a service oriented architecture    they make functional building blocks accessible over standard internet protocols independent of platforms and programming languages  these services can represent either new applications or just wrappers around existing legacy systems to make them network enabled     each soa building block can play one or both of two roles     implementers commonly build soas using web services standards  for example  soap  that have gained broad industry acceptance after recommendation of version     from the w c    world wide web consortium  in       these standards  also referred to as web service specifications  also provide greater interoperability and some protection from lock in to proprietary vendor software  one can  however  implement soa using any service based technology  such as jini  corba or rest     architectures can operate independently of specific technologies and can therefore be implemented using a wide range of technologies  including     implementations can use one or more of these protocols and  for example  might use a file system mechanism to communicate data conforming to a defined interface specification between processes conforming to the soa concept  the key is independent services with defined interfaces that can be called to perform their tasks in a standard way  without a service having foreknowledge of the calling application  and without the application having or needing knowledge of how the service actually performs its tasks     soa enables the development of applications that are built by combining loosely coupled and interoperable services       these services inter operate based on a formal definition  or contract  e g   wsdl  that is independent of the underlying platform and programming language  the interface definition hides the implementation of the language specific service  soa based systems can therefore function independently of development technologies and platforms  such as java   net  etc    services written in c  running on  net platforms and services written in java running on java ee platforms  for example  can both be consumed by a common composite application  or client   applications running on either platform can also consume services running on the other as web services that facilitate reuse  managed environments can also wrap cobol legacy systems and present them as software services  this has extended the useful life of many core legacy systems indefinitelycitation needed  no matter what language they originally used     soa can support integration and consolidation activities within complex enterprise systems  but soa does not specify or provide a methodology or framework for documenting capabilities or services     we can distinguish the service object oriented architecture  sooa   where service providers are network  call response  objects accepting remote invocations  from the service protocol oriented architecture  spoa   where a communication  read write  protocol is fixed and known beforehand by the provider and requestor  based on that protocol and a service description obtained from the service registry  the requestor can bind to the service provider by creating own proxy used for remote communication over the fixed protocol  if a service provider registers its service description by name  the requestors have to know the name of the service beforehand  in sooa  a proxy an object implementing the same service interfaces as its service provider is registered with the registries and it is always ready for use by requestors  thus  in sooa  the service provider owns and publishes the proxy as the active surrogate object with a codebase annotation  e g   urls to the code defining proxy behavior  jini eri   in spoa  by contrast  a passive service description is registered  e g   an xml document in wsdl for web services  or an interface description in idl for corba   the requestor then has to generate the proxy  a stub forwarding calls to a provider  based on a service description and the fixed communication protocol  e g   soap in web services  iiop in corba   this is referred to as a bind operation  the proxy binding operation is not required in sooa since the requestor holds the active surrogate object obtained via the registry  the surrogate object is already bound to the provider that registered it with its appropriate network configuration and its code annotations  web services  ogsa  rmi  and corba services cannot change the communication protocol between requestors and providers while the sooa approach is protocol neutral       high level languages such as bpel and specifications such as ws cdl and ws coordination extend the service concept by providing a method of defining and supporting orchestration of fine grained services into more coarse grained business services  which architects can in turn incorporate into workflows and business processes implemented in composite applications or portals       service oriented modeling  is a soa framework that identifies the various disciplines that guide soa practitioners to conceptualize  analyze  design  and architect their service oriented assets  the service oriented modeling framework  somf  offers a modeling language and a work structure or  map  depicting the various components that contribute to a successful service oriented modeling approach  it illustrates the major elements that identify the  what to do  aspects of a service development scheme  the model enables practitioners to craft a project plan and to identify the milestones of a service oriented initiative  somf also provides a common modeling notation to address alignment between business and it organizations     some enterprise architects believe that soa can help businesses respond more quickly and more cost effectively to changing market conditions    this style of architecture promotes reuse at the macro  service  level rather than micro  classes  level  it can also simplify interconnection to and usage of existing it  legacy  assets     with soa  the idea is that an organization can look at a problem holistically  a business has more overall control  theoretically there would not be a mass of developers using whatever tool sets might please them  but rather they would be coding to a standard that is set within the business  they can also develop enterprise wide soa that encapsulates a business oriented infrastructure  soa has also been illustrated as a highway system providing efficiency for car drivers  the point being that if everyone had a car  but there was no highway anywhere  things would be limited and disorganized  in any attempt to get anywhere quickly or efficiently  ibm vice president of web services michael liebow says that soa  builds highways        in some respects  soa could be regarded as an architectural evolution rather than as a revolution  it captures many of the best practices of previous software architectures  in communications systems  for example  little development of solutions that use truly static bindings to talk to other equipment in the network has taken place  by formally embracing a soa approach  such systems can position themselves to stress the importance of well defined  highly inter operable interfaces       somewho  have questioned whether soa simply revives concepts like modular programming      s   event oriented design      s   or interface component based design      s citation needed  soa promotes the goal of separating users  consumers  from the service implementations  services can therefore be run on various distributed platforms and be accessed across networks  this can also maximize reuse of servicescitation needed     a service comprises a stand alone unit of functionality available only via a formally defined interface  services can be some kind of  nano enterprises  that are easy to produce and improve  also services can be  mega corporations  constructed as the coordinated work of subordinate services     a mature rollout of soa effectively defines the api of an organization     reasons for treating the implementation of services as separate projects from larger projects include     an indirect benefit of soa involves dramatically simplified testing  services are autonomous  stateless  with fully documented interfaces  and separate from the cross cutting concerns of the implementation     if an organization possesses appropriately defined test data  then a corresponding stub is built that reacts to the test data when a service is being built  a full set of regression tests  scripts  data  and responses is also captured for the service  the service can be tested as a  black box  using existing stubs corresponding to the services it calls  test environments can be constructed where the primitive and out of scope services are stubs  while the remainder of the mesh is test deployments of full services  as each interface is fully documented with its own full set of regression test documentation  it becomes simple to identify problems in test services  testing evolves to merely validate that the test service operates according to its documentation  and finds gaps in documentation and test cases of all services within the environment  managing the data state of idempotent services is the only complexity     examples may prove useful to aid in documenting a service to the level where it becomes useful  the documentation of some apis within the java community process provide good examples  as these are exhaustive  staff would typically use only important subsets  the  ossjsa pdf  file within jsr    exemplifies such a file       one obvious and common challenge faced involves managing services metadatacitation needed  soa based environments can include many services that exchange messages to perform tasks  depending on the design  a single application may generate millions of messages  managing and providing information on how services interact can become complex  this becomes even more complicated when these services are delivered by different organizations within the company or even different companies  partners  suppliers  etc    this creates huge trust issues across teams  hence soa governance comes into the picture     another challenge involves the lack of testing in soa space  there are no sophisticated tools that provide testability of all headless services  including message and database services along with web services  in a typical architecture  lack of horizontal trust requires that both producers and consumers test services on a continuous basis  soa s main goal is to deliver agility to businessescitation needed  therefore it is important to invest in a testing framework  build it or buy it  that would provide the visibility required to find the culprit in the architecture  business agility requires soa services to be controlled by the business goals and directives as defined in the business motivation model  bmm        another challenge relates to providing appropriate levels of security  security models built into an application may no longer suffice when an application exposes its capabilities as services that can be used by other applications  that is  application managed security is not the right model for securing services  a number of new technologies and standards have startedwhen  to emerge and provide more appropriate models for security in soa     finally  the impact of changing a service that touches multiple business domains will require a higher level of change management governance    as soa and the ws   specifications practitioners expand  update and refine their output  they encounter a shortage of skilled people to work on soa based systems  including the integration of services and construction of services infrastructure     interoperability becomes an important aspect of soa implementations  the ws i organization has developed basic profile  bp  and basic security profile  bsp  to enforce compatibility    ws i has designed testing tools to help assess whether web services conform to ws i profile guidelines  additionally  another charter has been established to work on the reliable secure profile     significant vendor hype surrounds soa  which can create exaggerated expectations  product stacks continue to evolve as early adopters test the development and runtime products with real world problems  soa does not guarantee reduced it costs  improved systems agility or shorter time to market  successful soa implementations may realize some or all of these benefits depending on the quality and relevance of the system architecture and design         internal it delivery organizations routinely initiate soa efforts  and some do a poor job of introducing soa concepts to a businesscitation needed with the result that soa remains misunderstoodby whom  within that business  the adoption of soa starts to meet it delivery needs instead of those of the business  resulting in an organization with  for example  superlative laptop provisioning services  instead of one that can quickly respond to market opportunities  business leadership also frequently becomes convinced that the organization is executing well on soa     one of the most important benefits of soa is its ease of reuse  therefore accountability and funding models must ultimately evolve within the organization citation needed a business unit needs to be encouraged to create services that other units will use  conversely  units must be encouraged to reuse services  this requires a few new governance components     some criticisms of soa depend on conflating soa with web services    for example  some critics claim soa results in the addition of xml layers  introducing xml parsing and composition    in the absence of native or binary forms of remote procedure call  rpc   applications could run more slowly and require more processing power  increasing costs  most implementations do incur these overheads  but soa can be implemented using technologies  for example  java business integration  jbi   windows communication foundation  wcf  and data distribution service  dds   that do not depend on remote procedure calls or translation through xml  at the same time  emerging open source xml parsing technologies  such as vtd xml  and various xml compatible binary formats promise to significantly improve soa performance           stateful services require both the consumer and the provider to share the same consumer specific context  which is either included in or referenced by messages exchanged between the provider and the consumer  this constraint has the drawback that it could reduce the overall scalability of the service provider if the service provider needs to retain the shared context for each consumer  it also increases the coupling between a service provider and a consumer and makes switching service providers more difficult    ultimately  some critics feel that soa services are still too constrained by applications they represent       another concern relates to the ongoing evolution of ws   standards and products  e xa g   transaction  security   and soa can thus introduce new risks unless properly managed and estimated with additional budget and contingency for additional proof of concept work  there has even been an attempt to parody the complexity and sometimes oversold benefits of soa  in the form of a  soa facts  site that mimics the  chuck norris facts  meme     some criticswho  regard soa as merely an obvious evolution of currentlyupdate well deployed architectures  open interfaces  etc       it system designs sometimes overlook the desirability of modifying systems readily  many systems  including soa based systems  hard code the operations  goods and services of the organization  thus restricting their online service and business agility in the global marketplace citation needed    the next step in the design process covers the definition of a service delivery platform  sdp  and its implementation  in the sdp design phase one defines the business information models  identity management  products  content  devices  and the end user service characteristics  as well as how agile the system is so that it can deal with the evolution of the business and its customers     in october       at the  nd international soa symposium  a mixed group of    independent soa practitioners and vendors  the  soa manifesto working group   announced the publication of the soa manifesto    the soa manifesto is a set of objectives and guiding principles that aim to provide a clear understanding and vision of soa and service orientation  its purpose is rescuing the soa concept from an excessive use of the term by the vendor community and  a seemingly endless proliferation of misinformation and confusion        the manifesto provides a broad definition of soa  the values it represents for the signatories and some guiding principles  the manifesto prioritizes     as of september       the soa manifesto had been signed by more than     signatories and had been translated to nine languages     web      a perceived  second generation  of web activity  primarily features the ability of visitors to contribute information for collaboration and sharing  web     applications often use restful web apis and commonly feature ajax based user interfaces  utilizing web syndication  blogs  and wikis  while there are no set standards for web      it is characterized by building on the existing web server architecture and using services  web     can therefore be regarded as displaying some soa characteristics           some commentatorswho  also regard mashups as web     applications  the term  business mashups  describes web applications that combine content from more than one source into an integrated user experience that shares many of the characteristics of service oriented business applications  sobas   sobas are applications composed of services in a declarative manner  there is ongoing debate about  the collision of web      mashups  and soa   with some stating that web     applications are a realization of soa composite and business applications       tim o reilly coined the term  web      to describe a perceived  quickly growing set of web based applications    a topic that has experienced extensive coverage involves the relationship between web     and service oriented architectures  soas      soa is the philosophy of encapsulating application logic in services with a uniformly defined interface and making these publicly available via discovery mechanisms  the notion of complexity hiding and reuse  but also the concept of loosely coupling services has inspired researchers to elaborate on similarities between the two philosophies  soa and web      and their respective applications  some argue web     and soa have significantly different elements and thus can not be regarded  parallel philosophies   whereas others consider the two concepts as complementary and regard web     as the global soa       the philosophies of web     and soa serve different user needs and thus expose differences with respect to the design and also the technologies used in real world applications  however  as of     update  use cases demonstrated the potential of combining technologies and principles of both web     and soa       in an  internet of services   all people  machines  and goods will have access via the network infrastructure of tomorrow citation needed the internet will thus offer services for all areas of life and business  such as virtual insurance  online banking and music  and so on  those services will require a complex services infrastructure including service delivery platforms bringing together demand and supply  building blocks for the internet of services include soa  web     and semantics on the technology side  as well as novel business models  and approaches to systematic and community based innovation       even though oracle indicatescitation needed that gartner is coining a new term  gartner analysts indicate that they call this advanced soa and refer to it as  soa         most of the major middleware vendors  e xa g   red hat  webmethods  tibco software  ibm  sun microsystems  and oracle  have had some form of soa     attributes for years citation needed    soa implementations have been described as representing a piece of the larger vision known as the digital nervous system     or the zero latency enterprise        