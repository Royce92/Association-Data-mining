 code reuse  also called software reuse  is the use of existing software  or software knowledge  to build new software   following the reusability principles             ad hoc code reuse has been practiced from the earliest days of programming  programmers have always reused sections of code  templates  functions  and procedures  software reuse as a recognized area of study in software engineering  however  dates only from      when douglas mcilroy of bell laboratories proposed basing the software industry on reusable components     code reuse aims to save time and resources and reduce redundancy by taking advantage of assets that have already been created in some form within the software product development process   the key idea in reuse is that parts of a computer program written at one time can be or should be used in the construction of other programs written at a later time     code reuse implies the creation of a separately maintained version of the reusable assets  while code is the most common resource selected for reuse  other assets generated during the development cycle may offer opportunities for reuse  software components  test suites  designs  documentation  and so on      the software library is a good example of code reuse  programmers may decide to create internal abstractions so that certain parts of their program can be reused  or may create custom libraries for their own use  some characteristics that make software more easily reusable are modularity  loose coupling  high cohesion  information hiding and separation of concerns     for newly written code to use a piece of existing code  some kind of interface  or means of communication  must be defined  these commonly include a  call  or use of a subroutine  object  class  or prototype  in organizations  such practices are formalized and standardized by domain engineering aka software product line engineering     the general practice of using a prior version of an extant program as a starting point for the next version  is also a form of code reuse     some so called code  reuse  involves simply copying some or all of the code from an existing program into a new one  while organizations can realize time to market benefits for a new product with this approach  they can subsequently be saddled with many of the same code duplication problems caused by cut and paste programming     many researchers have worked to make reuse faster  easier  more systematic  and an integral part of the normal process of programming  these are some of the main goals behind the invention of object oriented programming  which became one of the most common forms of formalized reuse  a somewhat later invention is generic programming     another  newer means is to use software  generators   programs which can create new programs of a certain type  based on a set of parameters that users choose  fields of study about such systems are generative programming and metaprogramming     concerning motivation and driving factors  reuse can be     reuse can be categorized further     concerning form or structure of reuse  code can be      nfork reuse is often discouraged because it s a form of code duplication  which requires that every bug is corrected in each copy  and enhancements made to reused code need to be manually merged in every copy or they become out of date  however  fork reuse can have benefits such as isolation  flexibility to change the reused code  easier packaging  deployment and version management      a very common example of code reuse is the technique of using a software library  many common operations  such as converting information among different well known formats  accessing external storage  interfacing with external programs  or manipulating information  numbers  words  names  locations  dates  etc   in common ways  are needed by many different programs  authors of new programs can use the code in a software library to perform these tasks  instead of  re inventing the wheel   by writing fully new code directly in a program to perform an operation  library implementations often have the benefit of being well tested  and covering unusual or arcane cases  disadvantages include the inability to tweak details which may affect performance or the desired output  and the time and cost of acquiring  learning  and configuring the library      a design pattern is a general solution to a recurring problem  design patterns are more conceptual than tangible and can be modified to fit the exact need  however  abstract classes and interfaces can be reused to implement certain patterns     developers generally reuse large pieces of software via third party applications and frameworks  though frameworks are usually domain specific and applicable only to families of applications     systematic software reuse is a strategy for increasing productivity and improving quality in the software industry  although it is simple in concept  successful software reuse implementation is difficult in practice  a reason put forward for this is the dependence of software reuse on the context in which it is implemented  some problematic issues that needs to be addressed related to systematic software reuse arexa       retrocomputing encompasses reuse of code  simply because retro programs are being ran on older computers  or emulators for them     for instance  some code from ms dos has been reused so as to make the dosbox dos emulator     the whole concept of  code reuse  can also encompass applications outside of computing  for instance  reuse of text strings in general  such as naming things after people or other things  can basically reuse code to some extent  