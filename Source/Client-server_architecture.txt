 the client server model of computing is a distributed application structure that partitions tasks or workloads between the providers of a resource or service  called servers  and service requesters  called clients   often clients and servers communicate over a computer network on separate hardware  but both client and server may reside in the same system  a server host runs one or more server programs which share their resources with clients  a client does not share any of its resources  but requests a server s content or service function  clients therefore initiate communication sessions with servers which await incoming requests     examples of computer applications that use the client server model are email  network printing  and the world wide web             the client server characteristic describes the relationship of cooperating programs in an application  the server component provides a function or service to one or many clients  which initiate requests for such services     servers are classified by the services they provide  for instance  a web server serves web pages and a file server serves computer files  a shared resource may be any of the server computer s software and electronic components  from programs and data to processors and storage devices  the sharing of resources of a server constitute a service     whether a computer is a client  a server  or both  is determined by the nature of the application that requires the service functions  for example  a single computer can run web server and file server software at the same time to serve different data to clients making different kinds of requests  client software can also communicate with server software within the same computer   communication between servers  such as to synchronize data  is sometimes called inter server or server to server communication     in general  a service is an abstraction of computer resources and a client does not have to be concerned with how the server performs while fulfilling the request and delivering the response  the client only has to understand the response based on the well known application protocol  i e  the content and the formatting of the data for the requested service     clients and servers exchange messages in a request response messaging pattern  the client sends a request  and the server returns a response  this exchange of messages is an example of inter process communication  to communicate  the computers must have a common language  and they must follow rules so that both the client and the server know what to expect  the language and rules of communication are defined in a communications protocol  all client server protocols operate in the application layer  the application layer protocol defines the basic patterns of the dialogue  to formalize the data exchange even further  the server may implement an api  such as a web service    the api is an abstraction layer for such resources as databases and custom software  by restricting communication to a specific content format  it facilitates parsing  by abstracting access  it facilitates cross platform data exchange      a server may receive requests from many different clients in a very short period of time  because the computer can perform a limited number of tasks at any moment  it relies on a scheduling system to prioritize incoming requests from clients in order to accommodate them all in turn  to prevent abuse and maximize uptime  the server s software limits how a client can use the server s resources  even so  a server is not immune from abuse  a denial of service attack exploits a server s obligation to process requests by bombarding it with requests incessantly  this inhibits the server s ability to respond to legitimate requests     when a bank customer accesses online banking services with a web browser  the client   the client initiates a request to the bank s web server  the customer s login credentials may be stored in a database  and the web server accesses the database server as a client  an application server interprets the returned data by applying the bank s business logic  and provides the output to the web server  finally  the web server returns the result to the client web browser for display     in each step of this sequence of client server message exchanges  a computer processes a request and returns data  this is the request response messaging pattern  when all the requests are met  the sequence is complete and the web browser presents the data to the customer     this example illustrates a design pattern applicable to the client server model  separation of concerns     while formulating the client server model in the     s and     s  computer scientists at xerox and xerox parc used the terms server host  or serving host  and user host  or using host        one context in which researchers used these terms was in the design of a computer network programming language called decode encode language  del    the purpose of this language was to accept commands from one computer  the user host   which would return status reports to the user as it encoded the commands in network packets  another del capable computer  the server host  received the packets  decoded them  and returned formatted data to the user host  a del program on the user host received the results to present to the user  this is a client server transaction  development of del was just beginning in       the year that the united states department of defense established arpanet  predecessor of internet      client host and server host have subtly different meanings than client and server  a host is any computer connected to a network  whereas the words server and client may refer either to a computer or to a computer program  server host and user host always refer to computers  the host is a versatile  multifunction computer  clients and servers are just programs that run on a host  in the client server model  a server is more likely to be devoted to the task of serving     an early use of the word client occurs in  separating data from function in a distributed file system   a      paper by xerox parc computer scientists howard sturgis  james mitchell  and jay israel  the authors are careful to define the term for readers  and explain that they use it to distinguish between the user and the user s network node  the client     by       the word server had entered into general parlance        the client server model does not dictate that server hosts must have more resources than client hosts  rather  it enables any general purpose computer to extend its capabilities by using the shared resources of other hosts  centralized computing  however  specifically allocates a large amount of resources to a small number of computers  the more computation is offloaded from client hosts to the central computers  the simpler the client hosts can be       a thin client has few resources other than input devices and output devices    it relies heavily on network resources  servers and infrastructure  for computation and storage  a diskless node loads even its operating system from the network  and a computer terminal has no operating system at all  it is only an input output interface to the server  in contrast  a fat client  such as a personal computer  has many resources  and does not rely on a server for essential functions     as microcomputers decreased in price and increased in power from the     s to the late     s  many organizations transitioned computation from centralized servers  such as mainframes and minicomputers  to fat clients    this afforded greater  more individualized dominion over computer resources  but complicated information technology management        during the     s  web applications matured enough to rival application software developed for a specific microarchitecture  this maturation  more affordable mass storage  and the advent of service oriented architecture were among the factors that gave rise to the cloud computing trend of the     s       in addition to the client server model  distributed computing applications often use the peer to peer application architecture     in the client server model  the server is often designed to be a centralized system that serves many clients  the computing power  memory and storage requirements of a server must be scaled appropriately to the expected work load  i e  the number of clients connecting simultaneously  load balancing and failover systems are often employed to scale the server implementation     in a peer to peer  p p  network  two or more computers  peers  pool their resources and communicate in a decentralized system  peers are coequal  or equipotent nodes in a non hierarchical network  unlike clients in a client server or client queue client network  peers communicate with each other directly    in peer to peer networking  an algorithm in the peer to peer communications protocol balances load  and even peers with modest resources can help to share the load    if a node becomes unavailable  its shared resources remain available as long as other peers offers it  ideally  a peer does not need to achieve high availability because other  redundant peers make up for any resource downtime  as the availability and load capacity of peers change  the protocol reroutes requests      