 in computing  a plug and play device or computer bus  is one with a specification that facilitates the discovery of a hardware component in a system without the need for physical device configuration or user intervention in resolving resource conflicts       plug and play devices can be due to boot time assignment of device resources and to hotplug systems such as usb and ieee       firewire               in the beginnings of data processing technology  the hardware was just a collection of modules  and the functions of those modules had to be linked to accommodate different calculating operations  this linking was usually done by connecting some wires between modules and disconnecting others  for many mechanical data processing machines  such as the ibm punched card accounting machines  their calculating operations were directed by the use of a quick swap control panel wired to route signals between module sockets     as general purpose computing devices developed  these connections and disconnections were instead used to specify locations in the system address space where an expansion device should appear  in order for the device to be accessible by the central processing unit  if two or more of the same type of device were installed in one computer  it would be necessary to assign the second device to a separate  non overlapping region of the system address space so that both could be accessible at the same time     some early microcomputing devices such as the apple ii sometimes required the end user to physically cut some wires and solder others together to make configuration changes  the changes were intended to be largely permanent for the life of the hardware citation needed    as computers became more accessible to the general public  the need developed for more frequent changes to be made by computer users unskilled with using soldering irons  rather than cutting and soldering connections  configuration was accomplished by jumpers or dip switches         however  the process of configuring devices manually using jumpers or dip switches could be quite difficult  and there was usually no forgiveness for technical inexperience  incorrect settings could render either the whole system or just the expansion device completely or partially inoperable  some settings such as for interrupts  irq  or direct memory access  dma  required knowledge of what configuration had been previously manually assigned to other devices  as well as what settings the main system itself may be using  the system might still seem to work properly with an incorrect setting  until the irq or dma is actually needed and the entire system suddenly freezes and must be reset     as computing devices spread further out into the general population  there was ever greater pressure developing to automate this configuration process  and relieve the end user from the hassle and complexity of having to manually assign these many complex settings     in       the nubus architecture was developed by the massachusetts institute of technology  mit  as a platform agnostic peripheral interface that fully automated device configuration  the specification was sufficiently intelligent that it could work with both big endian and little endian computer platforms that had previously been mutually incompatible  however  this agnostic approach increased interfacing complexity and required support chips on every device which in the     s was expensive to do  so the technology did not gain widespread support     in       commodore developed the autoconfig protocol and the zorro expansion bus for its amiga line of expandable computers  the first public appearance was in the ces computer show at las vegas in       with the so called  lorraine  prototype  like nubus  zorro devices had absolutely no jumpers or dip switches  the zorro architecture did not spread to general computing use outside of the amiga product line  but was eventually upgraded for the later iteration of amiga computers     in       ibm released an update to the ibm pc known as the personal system   line of computers using the micro channel architecture  the ps   was capable of totally automatic self configuration  every piece of expansion hardware was issued with a floppy disk containing a special file used to auto configure the hardware to work with the computer  the user would install the device  turn on the computer  load the configuration information from the disk  and the hardware automatically assigned interrupts  dma  and so forth     however  the disks posed a problem if they were damaged or lost  as the only options at the time to obtain replacements was via postal mail or ibm s dialup bbs service  without the disks  any new hardware would be completely useless and the computer would not boot at all until the unconfigured device was removed     microchannel did not gain widespread support  because ibm wanted to exclude clone manufacturers from this next generation computing platform  anyone developing for mca had to sign non disclosure agreements and pay royalties to ibm for each device sold  putting a price premium on mca devices  end users and the clone manufacturers revolted against ibm and developed their own open standards bus  known as eisa  consequently  mca receded in use except in ibm s mainframes     in time  many industry standard architecture  isa  cards incorporated  through proprietary and varied techniques  hardware to self configure or to provide for software configuration  often  the card came with a configuration program on disk that could automatically set the software configurable  but not itself self configuring  hardware  some cards had both jumpers and software configuration  with some settings controlled by each  this compromise reduced the number of jumpers that had to be set  while avoiding great expense for certain settings  e g  nonvolatile registers for a base address setting  the problems of required jumpers continued on  but slowly diminished as more and more devices  both isa and other types  included extra self configuration hardware  however  these efforts still did not solve the problem of making sure the end user has the appropriate software driver for the hardware     isa pnp or  legacy  plug   play isa was a plug n play system that used a combination of modifications to hardware  the system bios  and operating system software to automatically manage resource allocations  it was superseded by the pci bus during the mid     s     in       microsoft released windows     which tried to fully automate device detection and configuration as much as possible  but could still fall back to manual settings if necessary  during the initial install process of windows     it would attempt to automatically detect all devices installed in the system  since full auto detection of everything was a new process without full industry support  the detection process constantly wrote to a progress tracking log file during the detection process  in the event that device probing would fail and the system would freeze  the end user could reboot the computer  restart the detection process  and the installer would use the tracking log to skip past the point that caused the previous freeze     at the time  there could be a mix of devices in a system  some capable of automatic configuration  and some still using fully manual settings using jumpers and dip switches  the old world of dos still lurked underneath windows     and systems could be configured to load devices three different ways     microsoft could not assert full control over all device settings  so configuration files could include a mix of driver entries inserted by the windows    automatic configuration process  and could also include driver entries inserted or modified manually by the computer users themselves  the windows    device manager also could offer users a choice of several semi automatic configurations to try to free up resources for devices that still needed manual configuration     also  although some later isa devices were capable of automatic configuration  it was common for pc isa expansion cards to limit themselves to a very small number of choices for interrupt request lines  for example  a network interface might limit itself to only interrupts       and     while a sound card might limit itself to interrupts       and     this results in few configuration choices if some of those interrupts are already used by some other device     the hardware of pc computers additionally limited device expansion options because interrupts could not be shared  and some multifunction expansion cards would use multiple interrupts for different card functions  such as a dual serial port card requiring a separate interrupt for each serial port     because of this complex operating environment  the autodetection process sometimes produced incorrect results  especially in systems with large numbers of expansion devices  this led to device conflicts within windows     resulting in devices which were supposed to be fully self configuring failing to work  the unreliability of the device installation process led to that plug and play was sometimes referred to as plug and pray     up until about       pc computers could still be purchased with a mix of isa and pci slots  so it was still possible that manual isa device configuration might be necessary  but with successive releases of new operating systems like windows      and windows xp  microsoft had sufficient clout to say that drivers would not be provided for older devices that did not support auto detection  in some cases  the user was forced to purchase new expansion devices or a whole new system to support the next operating system release     several completely automated computer interfaces are currently used  each of which requires no device configuration by the computer user  and the only task of the user is to install software for the self configuring devices     for most of these interfaces  very little technical information is available to the end user about the performance of the interface  although both firewire and usb have bandwidth that must be shared by all devices  most modern operating systems are unable to monitor and report the amount of bandwidth being used or available  or report activity on what devices are currently using the interface  