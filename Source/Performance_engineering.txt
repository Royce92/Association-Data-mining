 performance engineering or spe  systems performance engineering or software performance engineering  within systems engineering  encompasses the set of roles  skills  activities  practices  tools  and deliverables applied at every phase of the systems development life cycle which ensures that a solution will be designed  implemented  and operationally supported to meet the non functional requirements for performance  such as throughput  latency  or memory usage      it may be alternatively referred to as software performance engineering or application performance engineering within software engineering  as the connection between application success and business success continues to gain recognition  particularly in the mobile space  application performance engineering has taken on a preventative and perfective  role within the software development life cycle  as such  the term is typically used to describe the processes  people and technologies required to effectively test non functional requirements  ensure adherence to service levels and optimize application performance prior to deployment     the term performance engineering encompasses more than just the software and supporting infrastructure  and as such the term performance engineering is preferable from a macro view  adherence to the non functional requirements is also validated post deployment by monitoring the production systems  this is part of it service management  see also itil      performance engineering has become a separate discipline at a number of large corporations  with tasking separate but parallel to systems engineering  it is pervasive  involving people from multiple organizational units  but predominantly within the information technology organization             because this discipline is applied within multiple methodologies  the following activities will occur within differently specified phases  however if the phases of the rational unified process  rup  are used as a framework  then the activities will occur as follows     during this first conceptual phase of a program or project  critical business processes are identified  typically they are classified as critical based upon revenue value  cost savings  or other assigned business value  this classification is done by the business unit  not the it organization     high level risks that may impact system performance are identified and described at this time  an example might be known performance risks for a particular vendor system     finally performance activities  roles  and deliverables are identified for the elaboration phase  activities and resource loading are incorporated into the elaboration phase project plans     during this defining phase  the critical business processes are decomposed to critical use cases  such use cases will be decomposed further  as needed  to single page  screen  transitions  these are the use cases that will be subjected to script driven performance testing     the type of requirements that relate to performance engineering are the non functional requirements  or nfr  while a functional requirement relates to what business operations are to be performed  a performance related non functional requirement will relate to how fast that business operation performs under defined circumstances     the concept of  defined circumstances  is vital  for example     note the critical difference between the two specifications  the first example provides no conditions  the second clearly identifies the conditions under which the system is to perform  the second example may have a service level agreement  the first should not  the capacity planners and architects can actually design and build a system to meet the criteria for the valid nonfunctional requirement   but not for the invalid one  testers may build a reliable performance test for the second example  but not for the invalid example     each critical use case must have an associated nfr  if  for a given use case  no existing nfr is applicable  a new nfr specific to that use case must be created     non functional requirements are not limited to use cases  the overall system volumetrics must be specified  these will describe the overall system load over a specified time period  defining how many of each type of business transaction will be executed per unit of time  commonly volumetrics describe a typical business day  and then are broken down for each hour  this will describe how system load will vary over the course of the day  for example       of transaction a      of transaction b       of transaction c  etc  for a given business day  then in hour   so many executions of a  b  c etc   in hour   so many transaction executions  and so on  the information is often formatted in a tabular form for clarity  if different user classes are executing the transactions  this information will also be incorporated in the nfr documentation  finally  the transactions may be classified as to general type  normally being user interaction  report generation  and batch processing     the system volumetrics documented in the nfr documentation will be used as inputs for both load testing and stress testing of the system during the performance test  computer scientist have been using all kinds of approaches  e g   queueing theory  to develop performance evaluation models        at this point it is suggested that performance modeling be performed using the use case information as input  this may be done using a performance lab  and using prototypes and mockups of the  to be  system  or a vendor provided modeling tool may be used  or even merely a spreadsheet workbook  where each use case is modeled in a single sheet  and a summary sheet is used to provide high level information for all of the use cases     it is recommended that unified modeling language sequence diagrams be generated at the physical tier level for each use case  the physical tiers are represented by the vertical object columns  and the message communication between the tiers by the horizontal arrows  timing information should be associated with each horizontal arrow  this should correlate with the performance model     some performance engineering activities related to performance testing should be executed in this phase  they include validating a performance test strategy  developing a performance test plan  determining the sizing of test data sets  developing a performance test data plan  and identifying performance test scenarios     for any system of significant impact  a monitoring plan and a monitoring design are developed in this phase  performance engineering applies a subset of activities related to performance monitoring  both for the performance test environment as well as for the production environment     the risk document generated in the previous phase is revisited here  a risk mitigation plan is determined for each identified performance risk  and time  cost  and responsibility is determined and documented     finally performance activities  roles  and deliverables are identified for the construction phase  activities and resource loading are incorporated into the construction phase project plans  these will be elaborated for each iteration     early in this phase a number of performance tool related activities are required  these include     a member of the performance engineering practice and the development technical team leads should work together to identify performance oriented best practices for the development team  ideally the development organization should already have a body of best practices  but often these do not include or emphasize those best practices that impact system performance     the concept of application instrumentation should be introduced here with the participation of the it monitoring organization  several vendor monitoring systems have performance capabilities  these normally operate at the operating system  network  and server levels  e g  cpu utilization  memory utilization  disk i o  and for j ee servers the jvm performance including garbage collection     but this type of monitoring does not permit the tracking of use case level performance  to reach this level of monitoring capability may require that the application itself be instrumented  alternatively  a monitoring toolset that works at the switch level may be used   examples might be tealeaf s cx technology  quest software s foglight  hewlett packard s rum  netqos s superagent  or compuware s agentless clientvantage   the monitoring group should have specified the requirements in a previous phase  and should work with the development team to ensure that use case level monitoring is built in     the group responsible for infrastructural performance tuning should have an established  base model  checklist to tune the operating systems  network  servers  application  web  database  load balancer  etc    and any message queueing software  then as the performance test team starts to gather data  they should commence tuning the environment more specifically for the system to be deployed  this requires the active support of subject matter experts  for example  database tuning normally requires a dba who has special skills in that area     the performance test team normally does not execute performance tests in the development environment  but rather in a specialized pre deployment environment that is configured to be as close as possible to the planned production environment  this team will execute performance testing against test cases  validating that the critical use cases conform to the specified non functional requirements  the team will execute load testing against a normally expected  median  load as well as a peak load  they will often run stress tests that will identify the system bottlenecks  the data gathered  and the analyses  will be fed back to the group that does performance tuning  where necessary  the system will be tuned to bring nonconforming tests into conformance with the non functional requirements     if performance engineering has been properly applied at each iteration and phase of the project to this point  hopefully this will be sufficient to enable the system to receive performance certification  however  if for some reason  perhaps proper performance engineering working practices were not applied  there are tests that cannot be tuned into compliance  then it will be necessary to return portions of the system to development for refactoring  in some cases the problem can be resolved with additional hardware  but adding more hardware leads quickly to diminishing returns     for example  suppose we can improve     of a module by parallelizing it  and run on   cpus instead of   cpu  if   is the fraction of a calculation that is sequential  and       is the fraction that can be parallelized  then the maximum speedup that can be achieved by using p processors is given according to amdahl s law      in this example we would get                         so for quadrupling the processing power we only doubled the performance  from   to         and we are now well on the way to diminishing returns  if we go on to double the computing power again from   to   processors we get                        so now by doubling the processing power again we only got a performance improvement of about one fifth  from       to            during this final phase the system is deployed to the production environment  a number of preparatory steps are required  these include     once the new system is deployed  ongoing operations pick up performance activities  including     in the operational domain  post production deployment  performance engineering focuses primarily within three areas  service level management  capacity management  and problem management     in the service level management area  performance engineering is concerned with service level agreements and the associated systems monitoring that serves to validate service level compliance  detect problems  and identify trends  for example  when real user monitoring is deployed it is possible to ensure that user transactions are being executed in conformance with specified non functional requirements  transaction response time is logged in a database such that queries and reports can be run against the data  this permits trend analysis that can be useful for capacity management  when user transactions fall out of band  the events should generate alerts so that attention may be applied to the situation     for capacity management  performance engineering focuses on ensuring that the systems will remain within performance compliance  this means executing trend analysis on historical monitoring generated data  such that the future time of non compliance is predictable  for example  if a system is showing a trend of slowing transaction processing  which might be due to growing data set sizes  or increasing numbers of concurrent users  or other factors  then at some point the system will no longer meet the criteria specified within the service level agreements  capacity management is charged with ensuring that additional capacity is added in advance of that point  additional cpus  more memory  new database indexing  et cetera  so that the trend lines are reset and the system will remain within the specified performance range     within the problem management domain  the performance engineering practices are focused on resolving the root cause of performance related problems  these typically involve system tuning  changing operating system or device parameters  or even refactoring the application software to resolve poor performance due to poor design or bad coding practices     to ensure that there is proper feedback validating that the system meets the nfr specified performance metrics  any major system needs a monitoring subsystem  the planning  design  installation  configuration  and control of the monitoring subsystem is specified by an appropriately defined monitoring process  the benefits are as follows     the trend analysis component of this cannot be undervalued  this functionality  properly implemented  will enable predicting when a given application undergoing gradually increasing user loads and growing data sets will exceed the specified non functional performance requirements for a given use case  this permits proper management budgeting  acquisition of  and deployment of the required resources to keep the system running within the parameters of the non functional performance requirements  