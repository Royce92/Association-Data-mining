 cocoa is apple s native object oriented application programming interface  api  for the os x operating system     for ios  there is a similar api called cocoa touch which includes gesture recognition  animation  and a different set of graphical control elements  and is for applications for the ios operating system  used on apple devices such as iphone  ipad  ipod touch and apple tv     cocoa consists of the foundation kit  application kit  and core data frameworks  as included by cocoa h header file  as well as the libraries and frameworks included by those  such as the c standard library and the objective c runtime      cocoa applications are typically developed using the development tools provided by apple  specifically xcode  formerly project builder  and interface builder  using the objective c or swift language  however  the cocoa programming environment can be accessed using other tools  such as clozure cl  lispworks  object pascal  python  perl  ruby  and applescript with the aid of bridging mechanisms such as pascocoa  pyobjc  camelbones  rubycocoa and d objective c bridge  an implementation of the ruby language  called macruby  which did away with the requirement for a bridging mechanism  was previously developed by apple  while nu is a lisp like language that can be used with cocoa without a bridge  it is also possible to write objective c cocoa programs in a simple text editor and build it manually with gcc or clang from the command line or from a makefile     for end users  cocoa applications are those written using the cocoa programming environment  such applications usually have a distinctive feel  since the cocoa programming environment automates many aspects of an application to comply with apple s human interface guidelines             cocoa continues the lineage of several software frameworks  primarily the app kit and foundation kit  from the nextstep and openstep programming environments developed by next in the     s and     s  apple acquired next in december       and subsequently went to work on the rhapsody operating system that was supposed to be the direct successor of openstep  it was to have had an emulation base for mac os applications  called blue box  the openstep base of libraries and binary support was termed yellow box  rhapsody evolved into mac os x  and the yellow box became cocoa  as a result  cocoa classes begin with the letters  ns   such as nsstring or nsarray  these stand either for the next sun creation of openstep  or for the original proprietary term for the openstep framework  nextstep      much of the work that went into developing openstep was applied to the development of mac os x  cocoa being the most visible part  there are  however  some differences  for example  nextstep and openstep used display postscript for on screen display of text and graphics  while cocoa depends on apple s quartz  which uses the pdf imaging model  but not its underlying technology   cocoa also has a level of internet support  including the nsurl and webkit html classes  and others  while under openstep there was only rudimentary support for managed network connections through nsfilehandle classes and berkeley sockets     the resulting software framework received the name  cocoa  for the sake of expediency  because the name had already been trademarked by apple  for many years prior to this present use of the name  apple s  cocoa  trademark had originated as the name of a multimedia project design application for children  the application was originally developed at apple s advanced technology group under the name  kidsim   and was then renamed and trademarked as  cocoa   the trademark  and thus the name  cocoa   was re used to avoid the delay which would have occurred while registering a new trademark for this software framework  the original  cocoa  program was discontinued at apple in one of the rationalizations that followed steve jobs  return to apple  it was then licensed to a third party and marketed as stagecast creator as of     update     one feature of the cocoa environment is its facility for managing dynamically allocated memory  cocoa s nsobject class  from which most classes  both vendor and user  are derived  implements a reference counting scheme for memory management  objects that derive from the nsobject root class respond to a retain and a release message  and keep a retain count  a method titled retaincount exists  but contrary to its name  will usually not return the exact retain count of an object  it is mainly used for system level purposes  invoking it manually is not recommended by apple     a newly allocated object created with alloc or copy has a retain count of one  sending that object a retain message increments the retain count  while sending it a release message decrements the retain count  when an object s retain count reaches zero  it is deallocated by a procedure similar to a c   destructor  dealloc is not guaranteed to be invoked     starting with objective c      the objective c runtime implements an optional garbage collector  in this model  the runtime turns cocoa reference counting operations such as  retain  and  release  into no ops  the garbage collector does not exist on the ios implementation of objective c      garbage collection in objective c runs on a low priority background thread  and can halt on cocoa s user events  with the intention of keeping the user experience responsive     in       the llvm compiler introduced arc  automatic reference counting   which replaces the conventional garbage collector by performing static analysis of objective c source code and inserting retain and release messages as necessary     cocoa consists of three objective c object libraries called frameworks  frameworks are functionally similar to shared libraries  a compiled object that can be dynamically loaded into a program s address space at runtime  but frameworks add associated resources  header files  and documentation  the cocoa frameworks are implemented as a type of bundle  containing the aforementioned items in standard locations     a key part of the cocoa architecture is its comprehensive views model  this is organized along conventional lines for an application framework  but is based on the pdf drawing model provided by quartz  this allows creation of custom drawing content using postscript like drawing commands  which also allows automatic printer support and so forth  since the cocoa framework manages all the clipping  scrolling  scaling and other chores of drawing graphics  the programmer is freed from implementing basic infrastructure and can concentrate only on the unique aspects of an application s content     the smalltalk teams at xerox parc eventually settled on a design philosophy that led to easy development and high code reuse  known as  model view controller   mvc   the concept breaks an application into three sets of interacting object classes     cocoa s design is a strict application of mvc principles  under openstep  most of the classes provided were either high level view classes  in appkit  or one of a number of relatively low level model classes like nsstring  compared to similar mvc systems  openstep lacked a strong model layer  no stock class represented a  document   for instance  during the transition to cocoa  the model layer was expanded greatly  introducing a number of pre rolled classes to provide functionality common to desktop applications     in mac os x       apple introduced the nscontroller family of classes  which provide predefined behavior for the controller layer  these classes are considered part of the cocoa bindings system  which also makes extensive use of protocols such as key value observing and key value binding  the term  binding  refers to a relationship between two objects  often between a view and a controller  bindings allow the developer to focus more on declarative relationships rather than orchestrating fine grained behavior     with the arrival of mac os x       apple extended this foundation further by introducing the core data framework  which standardizes change tracking and persistence in the model layer  in effect  the framework greatly simplifies the process of making changes to application data  undoing changes  if necessary   saving data to disk  and reading it back in     by providing framework support for all three mvc layers  apple s goal is to reduce the amount of boilerplate or  glue  code that developers have to write  freeing up resources to spend time on application specific features     in most object oriented languages  calls to methods are represented physically by a pointer to the code in memory  this restricts the design of an application since specific  command handling  classes are required  usually organized according to the chain of responsibility design pattern  while cocoa retains this approach for the most part  objective c s late binding opens up more flexibility     under objective c  methods are represented by a selector  a string describing the method to call  when a message is sent  the selector is sent into the objective c runtime  matched against a list of available methods  and the method s implementation is called  since the selector is text data  this lets it be saved to a file  transmitted over a network or between processes  or manipulated in other ways  the implementation of the method is looked up at runtime  not compile time  there is a small performance penalty for this   but late binding allows the same selector to reference different implementations     by a similar token  cocoa provides a pervasive data manipulation method called key value coding  kvc    this permits a piece of data or property of an object to be looked up or changed at runtime by name   the property name acts as a key to the value itself  in traditional languages  this late binding is not possible  kvc leads to great design flexibility   an object s type does not need to be known  yet any property of that object can be discovered using kvc  in addition  by extending this system using something cocoa calls key value observing  kvo   automatic support for undo redo is provided     late static binding is a variant of binding somewhere between static and dynamic binding  the binding of names before the program is run is called static   early    bindings performed as the program runs are dynamic   late  or  virtual       one of the most useful features of cocoa is the powerful  base objects  the system supplies  as an example  consider the foundation classes nsstring and nsattributedstring  which provide unicode strings  and the nstext system in appkit  which allows the programmer to place string objects in the gui     nstext and its related classes are used to display and edit strings  the collection of objects involved permit an application to implement anything from a simple single line text entry field to a complete multi page  multi column text layout schema  with full professional typography features such as kerning  ligatures  running text around arbitrary shapes  rotation  full unicode support and anti aliased glyph rendering  paragraph layout can be controlled automatically or by the user  using a built in  ruler  object that can be attached to any text view  spell checking is automatic  using a single dictionary used by all applications that uses the  squiggly underlining  convention introduced by microsoft  actually a dashed red underline in cocoa   unlimited undo redo support is built in  using only the built in features  one can write a text editor application in as few as    lines of code  with new controller objects  this may fall to zero  this is in contrast to the textedit apis found in the earlier mac os     when extensions are needed  cocoa s use of objective c makes this a straightforward task  objective c includes the concept of  categories   which allows for modifications to an existing class  in place   functionality can be accomplished in a category without any changes to the original classes in the framework  or even access to its source  under more common frameworks this same task would require the programmer to make a new subclass supporting the additional features  and then change all instances of the classes to this new class     the cocoa frameworks are written in objective c  and hence objective c is the preferred language for development of cocoa applications  java bindings for the cocoa frameworks  known as the  java bridge   are also available but have not proven popular amongst cocoa developers  further  the need for runtime binding means many of cocoa s key features are not available with java  in       apple announced that the java bridge was to be deprecated  meaning that features added to cocoa in mac os x versions later than      would not be added to the cocoa java programming interface     at wwdc       apple introduced the swift programming language  which is intended to replace objective c      originally  applescript studio could be used to develop less complex cocoa applications   however  as of snow leopard  it has been deprecated  it was replaced with applescriptobjc  which allows you to program in applescript  while using cocoa frameworks      third party bindings available for other languages include clozure cl  lispworks  pyobjc  python   rubycocoa  ruby   camelbones  perl   fpc pascocoa  lazarus and free pascal   cocoa   monobjc  c   and nobjective c     nu uses the objective c object model directly  and therefore can use the cocoa frameworks without requiring a binding     there are also open source implementations of major parts of the cocoa framework  such as gnustep and cocotron  which allow cross platform cocoa application development to target other oses  such as microsoft windows and linux  