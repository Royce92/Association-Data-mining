 machine code or machine language is a set of instructions executed directly by a computer s central processing unit  cpu   each instruction performs a very specific task  such as a load  a jump  or an alu operation on a unit of data in a cpu register or memory  every program directly executed by a cpu is made up of a series of such instructions     numerical machine code  i e  not assembly code  may be regarded as the lowest level representation of a compiled and or assembled computer program or as a primitive and hardware dependent programming language  while it is possible to write programs directly in numerical machine code  it is tedious and error prone to manage individual bits and calculate numerical addresses and constants manually  it is therefore rarely done today  except for situations that require extreme optimization or debugging     almost all practical programs today are written in higher level languages or assembly language  and translated to executable machine code by a compiler and or assembler and linker  programs in interpreted languages  are not translated into machine code however  although their interpreter  which may be seen as an executor or processor  typically consists of directly executable machine code  generated from assembly and or high level language source code              every processor or processor family has its own machine code instruction set  instructions are patterns of bits that by physical design correspond to different commands to the machine  thus  the instruction set is specific to a class of processors using  much  the same architecture  successor or derivative processor designs often include all the instructions of a predecessor and may add additional instructions  occasionally  a successor design will discontinue or alter the meaning of some instruction code  typically because it is needed for new purposes   affecting code compatibility to some extent  even nearly completely compatible processors may show slightly different behavior for some instructions  but this is rarely a problem  systems may also differ in other details  such as memory arrangement  operating systems  or peripheral devices  because a program normally relies on such factors  different systems will typically not run the same machine code  even when the same type of processor is used     a machine code instruction set may have all instructions of the same length  or it may have variable length instructions  how the patterns are organized varies strongly with the particular architecture and often also with the type of instruction  most instructions have one or more opcode fields which specifies the basic instruction type  such as arithmetic  logical  jump  etc   and the actual operation  such as add or compare  and other fields that may give the type of the operand s   the addressing mode s   the addressing offset s  or index  or the actual value itself  such constant operands contained in an instruction are called immediates       not all machines or individual instructions have explicit operands  an accumulator machine has a combined left operand and result in an implicit accumulator for most arithmetic instructions  other architectures  such as      and the x   family  have accumulator versions of common instructions  with the accumulator regarded as one of the general registers by longer instructions  a stack machine has most or all of its operands on an implicit stack  special purpose instructions also often lack explicit operands  cpuid in the x   architecture writes values into four implicit destination registers  for instance   this distinction between explicit and implicit operands is important in machine code generators  especially in the register allocation and live range tracking parts  a good code optimizer can track implicit as well as explicit operands which may allow more frequent constant propagation  constant folding of registers  a register assigned the result of a constant expression freed up by replacing it by that constant  and other code enhancements     a computer program is a sequence of instructions that are executed by a cpu  while simple processors execute instructions one after another  superscalar processors are capable of executing several instructions at once     program flow may be influenced by special  jump  instructions that transfer execution to an instruction other than the numerically following one  conditional jumps are taken  execution continues at another address  or not  execution continues at the next instruction  depending on some condition     a much more readable rendition of machine language  called assembly language  uses mnemonic codes to refer to machine code instructions  rather than using the instructions  numeric values directly  for example  on the zilog z   processor  the machine code           which causes the cpu to decrement the b processor register  would be represented in assembly language as dec b     the mips architecture provides a specific example for a machine code whose instructions are always    bits long  the general type of instruction is given by the op  operation  field  the highest   bits  j type  jump  and i type  immediate  instructions are fully specified by op  r type  register  instructions include an additional field funct to determine the exact operation  the fields used in these types are     rs  rt  and rd indicate register operands  shamt gives a shift amount  and the address or immediate fields contain an operand directly     for example adding the registers   and   and placing the result in register   is encoded     load a value into register    taken from the memory cell    cells after the location listed in register       jumping to the address          in some computer architectures  the machine code is implemented by a more fundamental underlying layer of programs called microprograms  providing a common machine language interface across a line or family of different models of computer with widely different underlying dataflows  this is done to facilitate porting of machine language programs between different models  an example of this use is the ibm system     family of computers and their successors  with dataflow path widths of   bits to    bits and beyond  they nevertheless present a common architecture at the machine language level across the entire line     using a microcode layer to implement an emulator enables the computer to present the architecture of an entirely different computer  the system     line used this to allow porting programs from earlier ibm machines to the new family of computers  e g  an ibm                emulator on the ibm s     model        machine code should not be confused with so called  bytecode   or the older term p code   which is either executed by an interpreter or itself compiled into machine code for faster  direct  execution  machine code and assembly code are sometimes called native code when referring to platform dependent parts of language features or libraries      the harvard architecture is a computer architecture with physically separate storage and signal pathways for the code  instructions  and data  today  most processors implement such separate signal pathways for performance reasons but actually implement a modified harvard architecture citation needed so they can support tasks like loading an executable program from disk storage as data and then executing it  harvard architecture is contrasted to the von neumann architecture  where data and code are stored in the same memory which is read by the processor allowing the computer to execute commands     from the point of view of a process  the code space is the part of its address space where the code in execution is stored  in multitasking systems this comprises the program s code segment and usually shared libraries  in multi threading environment  different threads of one process share code space along with data space  which reduces the overhead of context switching considerably as compared to process switching     it has been said that machine code is so unreadable that the united states copyright office cannot identify whether a particular encoded program is an original work of authorship   however  the us copyright office does allow for copyright registration of computer programs   hofstadter compares machine code with the genetic code   looking at a program written in machine language is vaguely comparable to looking at a dna molecule atom by atom    